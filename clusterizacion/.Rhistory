clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancias[punto] = distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
distancia_intra_cluster = sum(distancias);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
puntos=matrix(data=c(1.09992,0.957025,0.915536,0.92173,0.96376,1.03163,1.05385,0.973543,0.91739,0.933904,1.02956,0.957571,1.09727,0.984134,1.00956,1.0564,1.07017,0.958567,1.08797,0.933988,1.98797,1.95638,2.09588,2.09313,1.96165,1.92801,1.97631,2.02217,2.0592,2.01979,1.92135,2.06646,1.95069,2.08966,2.06919,1.91089,2.00932,2.02784,1.96847,2.06384,0.965778,0.95114,0.966092,0.977275,0.919162,0.951029,1.08897,1.07058,0.997268,0.905692,2.00991,1.95589,2.03957,1.90152,1.91293,2.03668,2.0466,1.94401,1.94081,2.05596,0.99422,0.919007,0.987897,0.907339,1.06335,0.995286,0.90586,1.01367,0.910095,0.994774,2.07835,2.01287,1.91678,2.09513,2.04441,1.91102,2.05037,2.07255,1.93915,1.97947), ncol=2)
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
promedio
cromosomas=matrix(data=c(0.5,0.5,0.372059,0.16032,0.472014,1.83036,1.39833,1.30765,1.56572,1.76992,1.42695,1.93067,0.94781,1.46081,1.9924), nrow=1)
calcular_fitness(cromosomas, promedio, 5, puntos)
puntos=matrix(data=c(1.02737,0.935055,1.0348,1.04976,1.07453,1.07954,1.0501,1.05297,1.02495,1.09143,0.980302,1.04753,1.0254,1.0316,1.00177,0.920296,0.925267,1.09106,0.97858,0.999923,1.98656,2.09828,2.06036,2.08271,1.97464,2.08517,2.04528,2.02501,1.92232,2.07164,2.00316,2.04226,2.05968,2.07662,1.90798,2.08177,2.01585,1.96608,1.96342,1.91395,1.03299,1.04761,1.09467,1.05646,1.03011,1.06051,1.08844,1.03304,1.09124,0.922908,2.06708,2.09371,2.06683,1.95822,1.95228,2.03518,1.98161,1.92637,1.96033,1.95033,1.06811,0.986954,0.917672,1.09027,1.05069,1.02156,0.972263,0.983757,1.00441,1.00989,1.93494,1.92458,1.95243,1.93857,1.95581,1.95173,2.0103,1.95949,2.02995,2.06687), ncol=2)
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
cromosomas=matrix(data=c(0.5,0.5,0.842851,0.275495,0.0490569,2.01363,1.67232,1.10044,1.53797,2.01745,1.78351,1.89744,1.7489,1.14705,1.5457), nrow=1)
#Funcion de fitness
#------------------
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
puntos=matrix(data=c(1.09108,1.03143,0.927627,1.07772,0.917537,0.973791,1.04814,0.988519,0.945724,1.07634,1.02697,0.926945,0.968756,1.00541,1.00027,1.04394,0.994378,0.978018,1.0847,1.09689,1.98087,2.04679,1.99666,2.01073,1.93667,2.05165,1.94301,2.05026,1.95365,2.0458,1.93711,1.90093,1.98144,1.90884,1.94908,2.08583,2.09227,1.975,2.05998,1.95449,0.966272,1.09776,0.995133,0.977085,1.01022,1.08462,1.09001,1.01802,1.01515,0.977655,2.02847,1.9438,2.01744,2.06525,1.9075,2.04574,2.078,2.02342,2.03273,2.05944,0.905381,1.06388,0.908571,0.91542,0.962874,1.05546,0.924651,1.07982,1.08705,0.997767,2.00264,2.05722,1.93809,1.95246,1.96369,1.92008,1.96177,1.94931,2.0201,2.06865), ncol=2)
cromosomas=matrix(data=c(0.5,0.5,0.132294,0.934327,0.514195,1.50843,0.98547,1.31655,1.46962,1.58499,1.21016,1.72721,1.56541,1.44403,1.61944), nrow=1)
#------------------
#Funcion de fitness
#------------------
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
calcular_fitness(cromosomas, promedio, 5, puntos)
valores_limite = matrix(0, ncol=2, nrow=2);
valores_limite[1,1] = min(puntos[, 1]); #[1,1] es el minimo en x
valores_limite[1,2] = max(puntos[, 1]); #[1,2] es el maximo en x
valores_limite[2,1] = min(puntos[, 2]); #[2,1] es el minimo en y
valores_limite[2,2] = max(puntos[, 2]); #[2,2] es el maximo en y
View(valores_limite)
#Funcion de fitness
#------------------
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
print((puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))]));
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
puntos=matrix(data=c(1.02299,0.953732,1.06422,0.993871,1.03273,1.03114,1.09875,1.04359,1.06994,0.980433,0.990651,0.92788,1.01796,0.94864,1.03143,1.05426,1.03608,0.978103,0.970766,0.935673,2.01751,1.90582,1.96804,2.07768,2.08088,2.03851,2.03605,1.90021,1.96431,1.99631,1.92772,1.92586,1.91782,1.95552,2.0419,1.92491,2.09197,1.96748,1.92506,2.0381,0.94496,1.01015,1.05661,1.03751,1.00512,0.987296,1.09389,0.911082,0.90793,1.09995,2.00161,1.96515,1.97,1.93965,1.99583,2.04968,1.97252,1.96634,2.09188,1.98496,0.948406,1.05416,0.991607,1.06942,1.02086,0.936832,1.08189,0.918879,0.915105,0.95469,2.05208,1.99404,2.08573,2.0371,2.04082,2.07835,2.0443,2.09229,2.03467,1.93008), ncol=2)
cromosomas=matrix(data=c(0.5,0.5,0.44743,0.232418,0.605709,1.63118,1.15006,1.35294,1.78624,0.967937,1.49387,1.48462,1.19177,1.35756,1.91967), nrow=1)
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
calcular_fitness(cromosomas, promedio, 5, puntos)
puntos=matrix(data=c(0.925835,1.06506,0.989232,0.926895,0.977455,0.942395,1.00383,0.937206,1.0558,0.982591,1.04563,1.00167,1.0213,1.07978,0.910903,0.975699,0.977124,1.05317,0.949223,0.933659,1.92156,2.08244,2.01424,2.04364,2.0075,1.94133,1.94327,1.97232,2.0773,1.9902,2.01087,1.99753,1.9322,1.95563,2.06689,2.09042,2.04019,1.91044,1.94496,1.93638,0.922137,1.0845,0.913526,1.03341,0.915055,1.09358,0.943882,1.08424,0.996924,0.950187,1.95959,1.98065,2.07056,1.96259,1.90592,2.00616,2.00405,2.03061,2.02475,1.9745,1.08753,0.992736,0.953596,0.999897,1.09153,1.025,1.03686,0.943502,1.06848,0.905608,2.09782,1.98566,2.01143,1.90384,1.97772,1.93985,1.9263,2.09234,1.9106,1.93596), ncol=2)
cromosomas=matrix(data=c(0.5,0.5,0.36468,0.47332,0.00349049,1.62583,1.36435,0.984238,1.11106,1.74189,1.32114,1.62726,1.25748,1.40165,1.85314), nrow=1)
?cat
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
cat(puntos[punto, 1], puntos[punto, 2], pcromosoma[(k_max + (2*i - 1))], cromosoma[(k_max + (2*i))],(puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))]),(puntos[punto, 2] - cromosoma[(k_max + (2*i))]), "|");
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
print(promedio);
calcular_fitness(cromosomas, promedio, 5, puntos)
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
cat(puntos[punto, 1], puntos[punto, 2], cromosoma[(k_max + (2*i - 1))], cromosoma[(k_max + (2*i))],(puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))]),(puntos[punto, 2] - cromosoma[(k_max + (2*i))]), "|");
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
cat(i, puntos[punto, 1], puntos[punto, 2], cromosoma[(k_max + (2*i - 1))], cromosoma[(k_max + (2*i))],(puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))]),(puntos[punto, 2] - cromosoma[(k_max + (2*i))]), "|");
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
calcular_fitness <- function(cromosoma, promedio, k_max, puntos){
#Va a usar como funcion de fitness el indice Calinski-Harabasz
#Guarda la distancia de cada punto a su correspondiente cluster
distancias = matrix(0, ncol=1, nrow=nrow(puntos));
#Cuantos clusters hay habilitados
clusters = 0;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5) clusters = clusters + 1;
}
#Si solo hay un cluster, devuelve 0
if(clusters < 2) return (0);
distancia_intra_cluster = 0;
#Asigna primero cada punto a un cluster por proximidad
for(punto in 1:nrow(puntos)){
#Inicializa la distancia al cluster al que pertenece (inf = no pertenece a ninguno)
distancia_a_k = Inf;
for(i in 1:k_max){
#Si el valor de activacion es mayor a 0.5 (i.e. esta activado) busca los puntos que pertenecen a ese cluster
if(cromosoma[i] >= 0.5){
cat(i, puntos[punto, 1], puntos[punto, 2], cromosoma[(k_max + (2*i - 1))], cromosoma[(k_max + (2*i))],(puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))]),(puntos[punto, 2] - cromosoma[(k_max + (2*i))]),(k_max + (2*i)),(k_max + (2*i-1)),"|");
#Si la distancia a este centroide es la mas chica, se lo asigno al centroide
distancia_a_i = (puntos[punto, 1] - cromosoma[(k_max + (2*i - 1))])^2 + (puntos[punto, 2] - cromosoma[(k_max + (2*i))])^2
print(distancia_a_i);
if(distancia_a_i < distancia_a_k) {
distancia_a_k = distancia_a_i;
}
}
}
distancia_intra_cluster = distancia_intra_cluster + distancia_a_k; #La distancia cuadriatica del punto al cluster que pertenece
}
#Suma todas las distancias intra-clusters
#distancia_intra_cluster = sum(distancias);
print(distancia_intra_cluster);
#Teniendo todo solo resta calcular el indice CH
ch = (((promedio - distancia_intra_cluster)/distancia_intra_cluster)*(nrow(puntos)-clusters)/(clusters-1));
return (ch);
}
calcular_fitness(cromosomas, promedio, 5, puntos)
cromosomas
cromosomas=matrix(data=c(0.5,0.5,0.36468,0.47332,0.00349049,1.62583,1.36435,0.984238,1.11106,1.74189,1.32114,1.62726,1.25748,1.40165,1.85314,), nrow=1)
puntos=matrix(data=c(0.925835,1.06506,0.989232,0.926895,0.977455,0.942395,1.00383,0.937206,1.0558,0.982591,1.04563,1.00167,1.0213,1.07978,0.910903,0.975699,0.977124,1.05317,0.949223,0.933659,1.92156,2.08244,2.01424,2.04364,2.0075,1.94133,1.94327,1.97232,2.0773,1.9902,2.01087,1.99753,1.9322,1.95563,2.06689,2.09042,2.04019,1.91044,1.94496,1.93638,0.922137,1.0845,0.913526,1.03341,0.915055,1.09358,0.943882,1.08424,0.996924,0.950187,1.95959,1.98065,2.07056,1.96259,1.90592,2.00616,2.00405,2.03061,2.02475,1.9745,1.08753,0.992736,0.953596,0.999897,1.09153,1.025,1.03686,0.943502,1.06848,0.905608,2.09782,1.98566,2.01143,1.90384,1.97772,1.93985,1.9263,2.09234,1.9106,1.93596), ncol=2)
puntos=matrix(data=c(0.925835,1.06506,0.989232,0.926895,0.977455,0.942395,1.00383,0.937206,1.0558,0.982591,1.04563,1.00167,1.0213,1.07978,0.910903,0.975699,0.977124,1.05317,0.949223,0.933659,1.92156,2.08244,2.01424,2.04364,2.0075,1.94133,1.94327,1.97232,2.0773,1.9902,2.01087,1.99753,1.9322,1.95563,2.06689,2.09042,2.04019,1.91044,1.94496,1.93638,0.922137,1.0845,0.913526,1.03341,0.915055,1.09358,0.943882,1.08424,0.996924,0.950187,1.95959,1.98065,2.07056,1.96259,1.90592,2.00616,2.00405,2.03061,2.02475,1.9745,1.08753,0.992736,0.953596,0.999897,1.09153,1.025,1.03686,0.943502,1.06848,0.905608,2.09782,1.98566,2.01143,1.90384,1.97772,1.93985,1.9263,2.09234,1.9106,1.93596), ncol=2)
cromosomas=matrix(data=c(0.5,0.5,0.36468,0.47332,0.00349049,1.62583,1.32114,1.36435,1.62726,0.984238,1.25748,1.11106,1.40165,1.74189,1.85314,), nrow=1)
cromosomas=matrix(data=c(0.5,0.5,0.36468,0.47332,0.00349049,1.62583,1.32114,1.36435,1.62726,0.984238,1.25748,1.11106,1.40165,1.74189,1.85314), nrow=1)
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
calcular_fitness(cromosomas, promedio, 5, puntos)
puntos=matrix(data=c(0.925835,1.06506,0.989232,0.926895,0.977455,0.942395,1.00383,0.937206,1.0558,0.982591,1.04563,1.00167,1.0213,1.07978,0.910903,0.975699,0.977124,1.05317,0.949223,0.933659,1.92156,2.08244,2.01424,2.04364,2.0075,1.94133,1.94327,1.97232,2.0773,1.9902,2.01087,1.99753,1.9322,1.95563,2.06689,2.09042,2.04019,1.91044,1.94496,1.93638,0.922137,1.0845,0.913526,1.03341,0.915055,1.09358,0.943882,1.08424,0.996924,0.950187,1.95959,1.98065,2.07056,1.96259,1.90592,2.00616,2.00405,2.03061,2.02475,1.9745,1.08753,0.992736,0.953596,0.999897,1.09153,1.025,1.03686,0.943502,1.06848,0.905608,2.09782,1.98566,2.01143,1.90384,1.97772,1.93985,1.9263,2.09234,1.9106,1.93596), ncol=2)
centroide = t(c(mean(puntos[, 1]), mean(puntos[, 2])));
promedio = sum((puntos[, 1]-centroide[1])^2+(puntos[, 2]-centroide[2])^2);
cromosomas=matrix(data=c(0.5,0.5,0.5,0.5,0,1,1,1,2,2,1,2,2,0,0), nrow=1)
cromosomas
calcular_fitness(cromosomas, promedio, 5, puntos)
corrida <- read.delim("~/algoritmos-geneticos/clusterizacion/corrida.txt", header=FALSE)
View(corrida)
plot(corrida)
puntos=matrix(data=c(0.904401,0.916621,1.09063,1.00129,0.966211,1.09017,1.07587,0.949673,1.07456,1.02593,1.06119,0.969373,1.08062,0.98824,1.00273,0.920815,0.918978,0.925544,1.02364,1.0049,1.02373,1.02807,0.965717,0.988794,1.09504,0.978032,0.981618,1.09246,0.904894,1.07993,0.927593,1.07276,0.976955,0.946894,1.07835,0.950302,0.983747,1.02594,1.07049,1.09532,0.923794,0.957943,1.0393,1.03995,1.04587,0.951143,1.07355,1.08032,0.918632,0.964742,0.966578,0.92392,1.06265,1.042,0.982582,0.975958,1.06247,1.04517,1.09243,0.985139,0.976001,0.93569,0.980822,0.946444,1.07328,0.956787,0.913521,1.02963,1.06446,0.957109,0.948057,1.02459,1.03361,1.06386,0.942434,1.01304,1.01739,0.901545,0.998328,1.03351,1.07502,0.929244,1.02575,0.965289,1.06387,1.08196,0.987774,1.06418,0.956663,0.904854,0.923973,0.907512,1.02045,0.971618,0.974438,0.930345,1.061,0.947898,0.979063,0.968647,1.05432,1.06298,1.04662,1.02927,0.99311,1.07029,0.985494,0.979361,0.994822,1.08208,1.01529,0.984304,1.0661,0.950384,1.03076,0.939839,0.973889,0.972329,1.09585,1.0132,1.06308,1.052,0.970913,0.972636,0.910511,0.996434,0.923556,0.978989,0.988031,1.05658,0.959066,1.00607,0.952856,0.901177,1.08939,1.03941,1.07103,0.903405,1.03561,1.00575,0.995722,1.01283,0.993934,1.07171,1.08977,0.912186,1.01643,0.957963,1.03222,1.0904,0.918439,1.00112,1.01402,1.03276,0.91943,1.08141,1.09913,0.917845,1.06427,1.03247,0.944496,0.999938,0.993656,0.904442,0.967304,1.09613,1.0847,0.958292,0.972112,0.997513,0.985578,1.04582,0.931425,1.01238,1.01753,0.981088,1.04039,0.976994,0.932125,0.919208,0.94118,0.976451,0.919566,1.01243,0.928365,0.963767,1.04902,1.07601,1.05625,1.05257,1.03649,1.0914,0.94178,1.0526,0.924108,0.961012,1.07444,0.995889,0.909352,0.996833,2.01391,2.08143,2.09667,2.06802,2.00332,2.098,1.95271,2.02795,1.97423,2.00416,2.07842,2.00345,1.98605,1.90651,1.95055,1.91452,2.08537,2.03451,1.90675,1.92022,2.00731,2.08415,1.96034,2.02332,1.90384,2.08253,1.98832,1.91094,1.93686,1.99795,2.07459,1.94748,2.06817,1.92217,1.9757,2.06754,2.0255,2.01868,1.94203,2.0166,2.09461,1.96689,1.96594,2.06848,2.07439,1.91984,2.02882,1.91708,2.00425,1.97461,2.01852,2.03163,1.99042,2.0191,2.01175,2.03887,1.93096,2.03011,1.98059,2.04649,1.93654,1.94923,1.92391,1.94395,1.99798,1.95819,2.06657,1.95773,1.93198,2.03207,1.9413,2.03232,2.08726,1.94353,1.95367,2.07841,2.08574,1.9164,2.08779,1.95523,1.94145,1.9787,1.92364,2.0374,2.0766,2.0681,1.90053,1.98141,1.92094,2.09341,1.99273,1.96504,1.94564,2.01853,2.07556,1.97157,2.05315,1.93052,1.93481,1.94961,2.07818,2.01152,1.90518,2.0809,2.04292,2.09368,2.07534,1.94105,2.09785,2.02901,1.9759,1.90834,2.08113,1.91722,1.90487,1.93524,1.9244,1.91149,1.95046,2.06223,1.93099,1.99638,1.93111,1.96574,2.06619,2.08599,1.9248,2.08267,2.08131,2.03907,2.06354,1.93475,2.03842,2.08237,1.98784,2.03039,2.00239,2.02745,2.04521,1.93095,2.04513,2.01194,2.06867,1.98288,1.99964,2.06934,2.06585,2.02971,2.00787,2.07155,1.95707,2.08108,2.09899,2.07214,2.09575,2.00903,2.02105,2.00681,2.01013,1.98282,2.08517,1.92155,2.08379,1.99453,2.09316,2.05395,1.9648,2.03463,1.98532,2.05777,2.07583,1.9024,2.06918,2.07466,2.00522,1.93406,1.9157,2.02283,1.94833,1.93705,2.00129,2.03977,2.07271,2.0703,1.96047,1.96325,2.00976,2.00306,1.91851,2.03053,1.96005,1.95059,1.96083,1.90793,1.97317,1.9698,1.90877,1.96957,2.02147,2.09867,3.04943,2.97411,3.07308,2.94317,3.07331,3.07759,3.00627,2.97077,2.94845,2.91945,2.94786,2.95261,2.95903,3.0601,3.01513,3.08781,2.97042,2.97997,3.0781,2.95543,3.08214,3.05545,3.08714,2.92192,3.05456,3.03275,2.97673,3.07034,3.0739,3.01137,2.91169,3.02101,3.05294,3.07251,3.02444,3.08116,3.0511,3.03923,2.93887,2.95646,2.9539,3.06858,2.95753,3.0981,3.05977,2.94557,3.05945,3.06009,3.09039,3.05776,3.09399,3.00504,2.93455,2.91436,3.08947,2.90912,3.07768,3.04234,2.98696,3.05886,2.92592,2.96823,3.03219,3.03635,2.97425,2.96112,2.96204,2.93056,3.08028,2.9622,3.05565,3.03188,3.06846,3.00018,2.94594,2.92206,2.96777,2.96044,2.95328,3.05511,3.05827,2.92635,2.9802,3.07893,2.93948,3.04016,2.97169,3.05673,2.95587,2.95045,3.09504,2.94943,2.99677,2.97488,2.90353,2.94422,2.99998,3.0768,3.07548,2.97526,3.00137,2.98643,2.95359,2.92826,2.98429,3.09911,2.92177,3.05338,3.04759,2.92633,3.07407,3.061,2.98499,3.09011,2.9559,2.94582,2.92423,2.91649,3.07057,3.00409,3.08665,2.93577,2.9285,3.03182,3.0068,3.01505,3.06799,2.96832,3.06339,2.92397,2.92983,3.00489,3.03936,2.97007,2.98625,2.99782,2.97319,2.9136,3.099,2.90133,3.0057,3.01551,2.99205,3.00456,3.02948,2.92747,2.99484,3.01871,2.97166,3.06255,3.06727,3.06609,2.9708,3.04834,2.94659,2.94825,3.08223,3.02844,2.99334,3.04741,3.09759,3.04832,3.03,2.97222,3.06122,2.91342,2.95631,2.93607,2.91766,3.0726,2.95875,3.04911,2.94879,2.93301,2.94591,3.07473,2.95999,3.08464,2.95539,2.94895,3.07749,3.07928,3.00651,3.0886,2.95056,3.09587,2.96,3.05717,2.91476,3.07317,3.01187,2.92004,2.90142,3.05051,2.9265,2.97372,3.07857,3.04267,3.09158,3.01458,4.0944,3.90813,4.09677,4.02791,3.90889,3.90936,3.91779,4.07047,3.92327,3.99439,4.06507,4.02076,3.9337,4.07567,4.05492,3.9446,3.92291,4.07246,4.05585,4.06511,4.09397,4.04405,3.90764,3.91534,3.90516,3.98714,4.00779,4.08196,4.01038,3.99552,4.01603,3.90739,4.04118,3.98067,3.92605,3.91957,3.98988,3.96689,4.08751,3.99714,4.03773,3.98102,4.05159,3.90836,3.95771,4.06988,4.05311,4.03733,4.09107,3.94541,4.00087,3.96435,3.94985,4.05099,4.03343,3.91061,4.01909,4.00547,4.03847,4.08113,4.02437,3.90078,4.05569,3.96587,3.9823,4.08264,3.91398,3.97683,4.09693,3.93167,4.08298,4.09496,3.97203,4.05222,4.06451,4.06321,4.01899,3.9465,3.98984,3.91595,3.97125,4.07562,4.08723,4.04392,3.91921,4.06587,3.9258,4.08201,4.01154,3.94454,3.95749,4.01564,3.97526,4.00268,3.99565,3.98425,3.98861,4.07633,3.99366,4.04119,4.09593,4.08202,3.97845,4.02378,3.92594,4.09229,4.09739,3.91005,3.95368,3.91316,3.97102,4.03019,4.02827,4.0674,4.0792,4.00275,4.07535,4.09976,4.02429,3.97721,4.0325,4.03895,4.09508,4.01264,3.94767,4.06601,3.95898,4.07863,3.96946,3.94146,4.02543,4.03884,3.96572,4.09612,3.90415,4.00751,4.05682,3.98591,4.08302,4.07735,4.03668,3.91169,3.97986,4.09138,4.04156,4.00388,3.95354,4.0566,4.02644,4.07733,4.0714,4.03194,3.90659,4.09402,4.05063,3.95734,3.93253,3.94398,3.95251,4.08114,4.00185,4.0923,3.94745,3.91576,3.91782,4.08788,3.98277,3.91819,3.96403,4.07288,4.01295,3.94864,4.097,3.95863,4.09484,4.07878,3.91694,3.91122,4.02962,4.07674,3.94596,3.92144,3.96676,4.05721,3.98032,4.02332,3.91867,4.06334,3.9122,4.03962,3.90598,3.97295,3.98814,4.04511,4.00729,3.95088,4.01373,3.91992,3.95308,3.98101,0.944807,0.933406,1.08475,1.0894,1.02181,0.915205,0.936887,0.936063,0.989528,0.918325,1.01631,1.02123,1.01926,1.07601,1.02316,1.08723,1.04448,1.04072,0.942685,1.03823,0.92981,0.995604,0.996544,0.912397,1.06326,0.993592,1.09918,0.990677,0.956675,1.05334,1.01632,1.03029,0.962152,1.02705,1.00849,1.02223,0.919744,0.917323,1.08522,1.06801,1.03823,1.03625,1.03632,0.956981,1.07267,0.910121,1.08872,0.925455,1.09785,0.980008,2.01082,1.97329,1.98935,1.93023,1.96915,2.02181,1.90945,2.06644,1.96999,1.97507,2.0014,2.00572,1.98116,1.9488,1.93996,1.94971,2.00413,1.96046,1.95799,1.99457,2.09037,2.04761,2.06832,1.98777,2.08968,2.02925,2.03088,2.06185,1.90239,1.90435,2.07186,2.04709,1.93062,1.97637,1.91345,1.94933,2.01781,1.9489,1.94943,2.00451,2.03868,2.04141,1.91414,1.90148,2.02217,1.96686,2.08903,1.99786,1.91566,2.02474,3.06941,2.95,2.97994,2.92116,3.06337,2.94808,3.08238,2.91637,3.02068,3.05859,2.90809,2.95346,3.09294,3.03051,3.06869,2.95567,2.96616,3.07197,2.97687,2.93977,3.06136,3.00826,2.98987,2.94817,2.99951,2.95607,3.05866,3.02674,2.96257,2.90319,3.08655,3.00156,2.92799,2.99392,2.91293,3.09107,3.05695,3.06285,3.01506,2.96707,3.04753,2.97013,3.06491,2.98113,2.98733,3.00598,2.96565,2.90553,3.09994,2.93078,4.01307,4.05713,3.97681,4.09553,4.08392,3.92246,3.96436,3.91209,3.92328,3.96362,3.93273,4.0734,4.07743,4.08824,3.96992,4.05719,4.04024,4.03672,4.03837,4.00567,4.06293,3.9227,3.92787,4.0201,3.90458,4.06816,3.98801,4.00287,3.93164,3.94081,4.05843,3.93921,3.98451,3.90515,4.06079,3.98428,3.99397,4.08426,4.03998,4.01957,4.05231,3.96804,4.07955,4.03089,4.0844,3.90844,3.94107,4.05108,4.00659,3.9276,0.929668,0.935893,0.943333,0.927067,1.02909,1.06565,0.972446,0.979183,1.07332,0.949806,1.03382,0.937717,0.940519,1.00489,0.953929,0.994932,1.01959,1.06294,0.985128,0.903122,1.07221,0.992889,0.968369,1.00239,1.0844,0.923409,1.06641,0.989049,0.929225,0.921309,1.00707,0.944355,1.05198,1.07705,1.05441,1.06028,1.01374,0.979803,1.03396,0.958696,0.955493,0.961814,1.04326,0.976847,1.04875,0.93982,1.06362,1.01959,1.02338,0.980892,1.93021,1.95436,2.07112,2.00365,1.9783,1.99692,1.9273,2.06088,1.95548,1.92605,2.03058,2.08938,1.99243,1.92218,2.03887,1.97628,2.02769,2.01769,2.06019,2.0621,1.98485,2.05872,1.90811,1.94501,2.09323,2.07105,1.91717,1.93122,1.99189,1.99397,1.92685,1.98783,2.03668,1.91845,2.00421,2.08894,2.03503,2.09899,1.9636,2.01835,1.95088,2.02224,2.03167,1.93219,2.06419,2.09127,1.98115,2.03281,2.04928,1.905,3.02408,2.93096,2.92319,3.09665,2.9999,3.08893,2.98608,3.00136,3.08774,2.93088,2.90947,3.03116,2.98004,3.05137,2.97721,3.04177,3.06972,2.9337,2.99957,3.02259,3.03621,2.90661,3.02611,3.08195,3.00008,2.96146,2.9376,2.92146,3.00014,2.9827,3.01876,3.05241,2.96086,2.91677,2.95106,2.93138,2.97391,3.0515,3.06213,2.97489,2.99322,2.93606,3.08737,2.97624,2.92635,3.03679,3.01507,3.07817,2.9988,2.92852,4.0615,4.08166,3.97004,3.97229,3.91674,3.97159,3.98025,4.08753,3.97287,3.98644,4.05168,4.0391,3.96897,4.0541,3.96061,3.93475,3.93933,4.0369,3.9101,3.99601,4.08638,3.95476,4.07066,3.96882,3.922,3.93774,4.09172,4.06986,3.99481,3.96559,4.05128,3.98354,4.07832,3.91764,3.94839,4.01286,4.06021,4.00235,3.97863,3.96442,4.07138,4.09772,3.95065,3.92021,4.04378,3.93636,4.02909,4.04301,4.03028,3.98834,1.05002,1.04667,0.948652,1.07186,0.931714,0.925287,0.907956,1.06836,0.927358,1.05957,0.933,0.944207,0.95841,0.997306,0.981023,1.09067,0.915163,1.04069,1.06317,1.03229,1.09527,1.02652,1.08539,1.00135,1.00408,0.938319,1.07711,1.08893,1.05889,0.927512,1.03398,0.949586,1.09334,0.923555,1.04256,1.09424,1.09567,1.01161,0.900953,1.08706,0.976323,1.04563,0.909542,0.991678,1.09867,0.933205,0.971462,0.954506,0.969255,0.936162,2.03317,1.91281,1.90155,1.93795,2.07206,2.0219,2.0025,2.02949,1.91081,1.96521,1.93711,2.08147,1.93344,2.0599,1.99613,2.04089,2.05963,2.0587,2.07877,1.96161,2.09094,2.09658,2.08877,2.0437,2.00708,1.9776,1.98715,1.90519,1.92677,1.90418,2.04412,1.98247,1.90228,1.98601,1.92532,1.90359,2.03963,2.03818,2.04761,1.95679,1.95711,1.94462,1.96786,1.97377,1.9442,1.93617,1.92369,2.04536,1.91141,1.98268,3.07846,3.03696,2.99221,2.91195,3.0265,3.04995,3.00423,3.00317,2.92867,2.91883,2.94406,2.94665,2.99746,3.08338,3.07484,2.95552,3.06316,3.088,3.06905,2.97979,3.05721,3.03079,3.0313,2.96758,2.98426,2.96738,2.92287,2.9123,3.01421,3.09721,2.90245,2.90794,3.02011,3.05723,2.99774,2.95269,2.97317,3.03751,3.01487,3.06129,3.01867,2.98535,3.09915,3.09755,2.97918,3.07256,2.90788,3.0762,2.95258,3.06999,4.01504,4.02779,3.91971,4.06255,3.94126,3.90753,3.97771,3.98888,4.03836,4.05997,3.9962,4.08664,4.01249,4.0522,4.00013,4.08618,3.98813,4.02388,3.98998,3.97063,3.9598,4.09897,4.0436,3.91932,4.09961,4.08971,4.06116,4.00382,3.94312,3.99247,3.97329,4.02014,4.08667,3.9028,4.07035,4.0646,4.06615,3.9819,4.03153,4.00624,4.03815,4.08477,4.06903,3.98133,4.06275,3.95658,3.96768,4.05212,3.93245,4.07526,0.945538,0.969922,0.992289,0.991084,0.937371,1.02332,0.945957,0.961855,1.09723,1.06202,1.03651,1.06633,0.935325,0.910242,0.959377,1.0318,0.915694,0.957395,0.969224,0.953948,0.994963,1.01717,0.99142,0.914234,0.998141,1.07444,1.01498,0.932173,1.0635,0.934866,0.93357,1.03631,1.08196,0.976139,0.983563,1.05829,0.974638,0.932248,1.09049,0.931058,0.991057,0.938831,1.05418,1.04077,1.05493,1.03612,0.905735,0.954109,1.0978,1.06384,2.05635,1.92366,2.04029,1.94676,1.96829,1.92521,1.95604,1.99037,2.05938,2.02901,2.08345,2.06918,2.09708,2.02096,1.96048,1.93818,1.98403,1.92227,2.05416,2.00031,1.99315,2.07324,2.01828,1.94329,2.0066,1.96394,1.97831,1.99134,1.91462,1.96429,1.90207,1.953,1.98769,1.9473,2.07953,1.98482,2.00513,2.00112,1.90755,2.00049,1.96594,1.99998,1.96735,2.01886,1.9166,2.06687,1.97876,1.98066,2.07823,1.92761,3.07896,3.01594,3.02056,3.01229,3.06626,2.97277,2.97058,2.95917,2.91243,2.92732,2.99362,2.92032,3.06585,3.09918,2.93508,2.97442,2.94614,3.03668,3.05164,2.95687,3.02294,3.04288,2.95384,3.03926,2.95966,2.95344,2.99852,2.99199,2.97741,3.09599,3.02709,2.94176,3.08449,3.00188,2.98593,2.90189,3.01228,3.01576,3.03106,3.09208,2.93609,2.98447,2.97174,2.9564,3.012,3.07774,2.97636,3.04657,2.98996,2.93217,4.02509,3.93749,4.01377,3.96586,4.01551,4.07204,4.09348,4.01097,3.93873,3.98591,4.07945,3.90138,3.9848,4.0258,3.96922,4.01321,4.08809,4.09462,4.06559,3.99467,3.97089,3.95562,3.95811,4.00466,4.06786,4.09954,4.04802,3.90098,4.09055,3.93183,3.92213,4.06919,3.97383,4.04464,3.9812,4.093,3.98549,3.93366,3.94074,3.95704,4.01376,3.92651,3.91844,3.92513,4.07683,3.93012,4.07709,4.0717,3.99933,3.90974), ncol=2)
View(puntos)
puntos=matrix(data=c(0.904401,0.916621,1.09063,1.00129,0.966211,1.09017,1.07587,0.949673,1.07456,1.02593,1.06119,0.969373,1.08062,0.98824,1.00273,0.920815,0.918978,0.925544,1.02364,1.0049,1.02373,1.02807,0.965717,0.988794,1.09504,0.978032,0.981618,1.09246,0.904894,1.07993,0.927593,1.07276,0.976955,0.946894,1.07835,0.950302,0.983747,1.02594,1.07049,1.09532,0.923794,0.957943,1.0393,1.03995,1.04587,0.951143,1.07355,1.08032,0.918632,0.964742,0.966578,0.92392,1.06265,1.042,0.982582,0.975958,1.06247,1.04517,1.09243,0.985139,0.976001,0.93569,0.980822,0.946444,1.07328,0.956787,0.913521,1.02963,1.06446,0.957109,0.948057,1.02459,1.03361,1.06386,0.942434,1.01304,1.01739,0.901545,0.998328,1.03351,1.07502,0.929244,1.02575,0.965289,1.06387,1.08196,0.987774,1.06418,0.956663,0.904854,0.923973,0.907512,1.02045,0.971618,0.974438,0.930345,1.061,0.947898,0.979063,0.968647,1.05432,1.06298,1.04662,1.02927,0.99311,1.07029,0.985494,0.979361,0.994822,1.08208,1.01529,0.984304,1.0661,0.950384,1.03076,0.939839,0.973889,0.972329,1.09585,1.0132,1.06308,1.052,0.970913,0.972636,0.910511,0.996434,0.923556,0.978989,0.988031,1.05658,0.959066,1.00607,0.952856,0.901177,1.08939,1.03941,1.07103,0.903405,1.03561,1.00575,0.995722,1.01283,0.993934,1.07171,1.08977,0.912186,1.01643,0.957963,1.03222,1.0904,0.918439,1.00112,1.01402,1.03276,0.91943,1.08141,1.09913,0.917845,1.06427,1.03247,0.944496,0.999938,0.993656,0.904442,0.967304,1.09613,1.0847,0.958292,0.972112,0.997513,0.985578,1.04582,0.931425,1.01238,1.01753,0.981088,1.04039,0.976994,0.932125,0.919208,0.94118,0.976451,0.919566,1.01243,0.928365,0.963767,1.04902,1.07601,1.05625,1.05257,1.03649,1.0914,0.94178,1.0526,0.924108,0.961012,1.07444,0.995889,0.909352,0.996833,2.01391,2.08143,2.09667,2.06802,2.00332,2.098,1.95271,2.02795,1.97423,2.00416,2.07842,2.00345,1.98605,1.90651,1.95055,1.91452,2.08537,2.03451,1.90675,1.92022,2.00731,2.08415,1.96034,2.02332,1.90384,2.08253,1.98832,1.91094,1.93686,1.99795,2.07459,1.94748,2.06817,1.92217,1.9757,2.06754,2.0255,2.01868,1.94203,2.0166,2.09461,1.96689,1.96594,2.06848,2.07439,1.91984,2.02882,1.91708,2.00425,1.97461,2.01852,2.03163,1.99042,2.0191,2.01175,2.03887,1.93096,2.03011,1.98059,2.04649,1.93654,1.94923,1.92391,1.94395,1.99798,1.95819,2.06657,1.95773,1.93198,2.03207,1.9413,2.03232,2.08726,1.94353,1.95367,2.07841,2.08574,1.9164,2.08779,1.95523,1.94145,1.9787,1.92364,2.0374,2.0766,2.0681,1.90053,1.98141,1.92094,2.09341,1.99273,1.96504,1.94564,2.01853,2.07556,1.97157,2.05315,1.93052,1.93481,1.94961,2.07818,2.01152,1.90518,2.0809,2.04292,2.09368,2.07534,1.94105,2.09785,2.02901,1.9759,1.90834,2.08113,1.91722,1.90487,1.93524,1.9244,1.91149,1.95046,2.06223,1.93099,1.99638,1.93111,1.96574,2.06619,2.08599,1.9248,2.08267,2.08131,2.03907,2.06354,1.93475,2.03842,2.08237,1.98784,2.03039,2.00239,2.02745,2.04521,1.93095,2.04513,2.01194,2.06867,1.98288,1.99964,2.06934,2.06585,2.02971,2.00787,2.07155,1.95707,2.08108,2.09899,2.07214,2.09575,2.00903,2.02105,2.00681,2.01013,1.98282,2.08517,1.92155,2.08379,1.99453,2.09316,2.05395,1.9648,2.03463,1.98532,2.05777,2.07583,1.9024,2.06918,2.07466,2.00522,1.93406,1.9157,2.02283,1.94833,1.93705,2.00129,2.03977,2.07271,2.0703,1.96047,1.96325,2.00976,2.00306,1.91851,2.03053,1.96005,1.95059,1.96083,1.90793,1.97317,1.9698,1.90877,1.96957,2.02147,2.09867,3.04943,2.97411,3.07308,2.94317,3.07331,3.07759,3.00627,2.97077,2.94845,2.91945,2.94786,2.95261,2.95903,3.0601,3.01513,3.08781,2.97042,2.97997,3.0781,2.95543,3.08214,3.05545,3.08714,2.92192,3.05456,3.03275,2.97673,3.07034,3.0739,3.01137,2.91169,3.02101,3.05294,3.07251,3.02444,3.08116,3.0511,3.03923,2.93887,2.95646,2.9539,3.06858,2.95753,3.0981,3.05977,2.94557,3.05945,3.06009,3.09039,3.05776,3.09399,3.00504,2.93455,2.91436,3.08947,2.90912,3.07768,3.04234,2.98696,3.05886,2.92592,2.96823,3.03219,3.03635,2.97425,2.96112,2.96204,2.93056,3.08028,2.9622,3.05565,3.03188,3.06846,3.00018,2.94594,2.92206,2.96777,2.96044,2.95328,3.05511,3.05827,2.92635,2.9802,3.07893,2.93948,3.04016,2.97169,3.05673,2.95587,2.95045,3.09504,2.94943,2.99677,2.97488,2.90353,2.94422,2.99998,3.0768,3.07548,2.97526,3.00137,2.98643,2.95359,2.92826,2.98429,3.09911,2.92177,3.05338,3.04759,2.92633,3.07407,3.061,2.98499,3.09011,2.9559,2.94582,2.92423,2.91649,3.07057,3.00409,3.08665,2.93577,2.9285,3.03182,3.0068,3.01505,3.06799,2.96832,3.06339,2.92397,2.92983,3.00489,3.03936,2.97007,2.98625,2.99782,2.97319,2.9136,3.099,2.90133,3.0057,3.01551,2.99205,3.00456,3.02948,2.92747,2.99484,3.01871,2.97166,3.06255,3.06727,3.06609,2.9708,3.04834,2.94659,2.94825,3.08223,3.02844,2.99334,3.04741,3.09759,3.04832,3.03,2.97222,3.06122,2.91342,2.95631,2.93607,2.91766,3.0726,2.95875,3.04911,2.94879,2.93301,2.94591,3.07473,2.95999,3.08464,2.95539,2.94895,3.07749,3.07928,3.00651,3.0886,2.95056,3.09587,2.96,3.05717,2.91476,3.07317,3.01187,2.92004,2.90142,3.05051,2.9265,2.97372,3.07857,3.04267,3.09158,3.01458,4.0944,3.90813,4.09677,4.02791,3.90889,3.90936,3.91779,4.07047,3.92327,3.99439,4.06507,4.02076,3.9337,4.07567,4.05492,3.9446,3.92291,4.07246,4.05585,4.06511,4.09397,4.04405,3.90764,3.91534,3.90516,3.98714,4.00779,4.08196,4.01038,3.99552,4.01603,3.90739,4.04118,3.98067,3.92605,3.91957,3.98988,3.96689,4.08751,3.99714,4.03773,3.98102,4.05159,3.90836,3.95771,4.06988,4.05311,4.03733,4.09107,3.94541,4.00087,3.96435,3.94985,4.05099,4.03343,3.91061,4.01909,4.00547,4.03847,4.08113,4.02437,3.90078,4.05569,3.96587,3.9823,4.08264,3.91398,3.97683,4.09693,3.93167,4.08298,4.09496,3.97203,4.05222,4.06451,4.06321,4.01899,3.9465,3.98984,3.91595,3.97125,4.07562,4.08723,4.04392,3.91921,4.06587,3.9258,4.08201,4.01154,3.94454,3.95749,4.01564,3.97526,4.00268,3.99565,3.98425,3.98861,4.07633,3.99366,4.04119,4.09593,4.08202,3.97845,4.02378,3.92594,4.09229,4.09739,3.91005,3.95368,3.91316,3.97102,4.03019,4.02827,4.0674,4.0792,4.00275,4.07535,4.09976,4.02429,3.97721,4.0325,4.03895,4.09508,4.01264,3.94767,4.06601,3.95898,4.07863,3.96946,3.94146,4.02543,4.03884,3.96572,4.09612,3.90415,4.00751,4.05682,3.98591,4.08302,4.07735,4.03668,3.91169,3.97986,4.09138,4.04156,4.00388,3.95354,4.0566,4.02644,4.07733,4.0714,4.03194,3.90659,4.09402,4.05063,3.95734,3.93253,3.94398,3.95251,4.08114,4.00185,4.0923,3.94745,3.91576,3.91782,4.08788,3.98277,3.91819,3.96403,4.07288,4.01295,3.94864,4.097,3.95863,4.09484,4.07878,3.91694,3.91122,4.02962,4.07674,3.94596,3.92144,3.96676,4.05721,3.98032,4.02332,3.91867,4.06334,3.9122,4.03962,3.90598,3.97295,3.98814,4.04511,4.00729,3.95088,4.01373,3.91992,3.95308,3.98101,0.944807,0.933406,1.08475,1.0894,1.02181,0.915205,0.936887,0.936063,0.989528,0.918325,1.01631,1.02123,1.01926,1.07601,1.02316,1.08723,1.04448,1.04072,0.942685,1.03823,0.92981,0.995604,0.996544,0.912397,1.06326,0.993592,1.09918,0.990677,0.956675,1.05334,1.01632,1.03029,0.962152,1.02705,1.00849,1.02223,0.919744,0.917323,1.08522,1.06801,1.03823,1.03625,1.03632,0.956981,1.07267,0.910121,1.08872,0.925455,1.09785,0.980008,2.01082,1.97329,1.98935,1.93023,1.96915,2.02181,1.90945,2.06644,1.96999,1.97507,2.0014,2.00572,1.98116,1.9488,1.93996,1.94971,2.00413,1.96046,1.95799,1.99457,2.09037,2.04761,2.06832,1.98777,2.08968,2.02925,2.03088,2.06185,1.90239,1.90435,2.07186,2.04709,1.93062,1.97637,1.91345,1.94933,2.01781,1.9489,1.94943,2.00451,2.03868,2.04141,1.91414,1.90148,2.02217,1.96686,2.08903,1.99786,1.91566,2.02474,3.06941,2.95,2.97994,2.92116,3.06337,2.94808,3.08238,2.91637,3.02068,3.05859,2.90809,2.95346,3.09294,3.03051,3.06869,2.95567,2.96616,3.07197,2.97687,2.93977,3.06136,3.00826,2.98987,2.94817,2.99951,2.95607,3.05866,3.02674,2.96257,2.90319,3.08655,3.00156,2.92799,2.99392,2.91293,3.09107,3.05695,3.06285,3.01506,2.96707,3.04753,2.97013,3.06491,2.98113,2.98733,3.00598,2.96565,2.90553,3.09994,2.93078,4.01307,4.05713,3.97681,4.09553,4.08392,3.92246,3.96436,3.91209,3.92328,3.96362,3.93273,4.0734,4.07743,4.08824,3.96992,4.05719,4.04024,4.03672,4.03837,4.00567,4.06293,3.9227,3.92787,4.0201,3.90458,4.06816,3.98801,4.00287,3.93164,3.94081,4.05843,3.93921,3.98451,3.90515,4.06079,3.98428,3.99397,4.08426,4.03998,4.01957,4.05231,3.96804,4.07955,4.03089,4.0844,3.90844,3.94107,4.05108,4.00659,3.9276,0.929668,0.935893,0.943333,0.927067,1.02909,1.06565,0.972446,0.979183,1.07332,0.949806,1.03382,0.937717,0.940519,1.00489,0.953929,0.994932,1.01959,1.06294,0.985128,0.903122,1.07221,0.992889,0.968369,1.00239,1.0844,0.923409,1.06641,0.989049,0.929225,0.921309,1.00707,0.944355,1.05198,1.07705,1.05441,1.06028,1.01374,0.979803,1.03396,0.958696,0.955493,0.961814,1.04326,0.976847,1.04875,0.93982,1.06362,1.01959,1.02338,0.980892,1.93021,1.95436,2.07112,2.00365,1.9783,1.99692,1.9273,2.06088,1.95548,1.92605,2.03058,2.08938,1.99243,1.92218,2.03887,1.97628,2.02769,2.01769,2.06019,2.0621,1.98485,2.05872,1.90811,1.94501,2.09323,2.07105,1.91717,1.93122,1.99189,1.99397,1.92685,1.98783,2.03668,1.91845,2.00421,2.08894,2.03503,2.09899,1.9636,2.01835,1.95088,2.02224,2.03167,1.93219,2.06419,2.09127,1.98115,2.03281,2.04928,1.905,3.02408,2.93096,2.92319,3.09665,2.9999,3.08893,2.98608,3.00136,3.08774,2.93088,2.90947,3.03116,2.98004,3.05137,2.97721,3.04177,3.06972,2.9337,2.99957,3.02259,3.03621,2.90661,3.02611,3.08195,3.00008,2.96146,2.9376,2.92146,3.00014,2.9827,3.01876,3.05241,2.96086,2.91677,2.95106,2.93138,2.97391,3.0515,3.06213,2.97489,2.99322,2.93606,3.08737,2.97624,2.92635,3.03679,3.01507,3.07817,2.9988,2.92852,4.0615,4.08166,3.97004,3.97229,3.91674,3.97159,3.98025,4.08753,3.97287,3.98644,4.05168,4.0391,3.96897,4.0541,3.96061,3.93475,3.93933,4.0369,3.9101,3.99601,4.08638,3.95476,4.07066,3.96882,3.922,3.93774,4.09172,4.06986,3.99481,3.96559,4.05128,3.98354,4.07832,3.91764,3.94839,4.01286,4.06021,4.00235,3.97863,3.96442,4.07138,4.09772,3.95065,3.92021,4.04378,3.93636,4.02909,4.04301,4.03028,3.98834,1.05002,1.04667,0.948652,1.07186,0.931714,0.925287,0.907956,1.06836,0.927358,1.05957,0.933,0.944207,0.95841,0.997306,0.981023,1.09067,0.915163,1.04069,1.06317,1.03229,1.09527,1.02652,1.08539,1.00135,1.00408,0.938319,1.07711,1.08893,1.05889,0.927512,1.03398,0.949586,1.09334,0.923555,1.04256,1.09424,1.09567,1.01161,0.900953,1.08706,0.976323,1.04563,0.909542,0.991678,1.09867,0.933205,0.971462,0.954506,0.969255,0.936162,2.03317,1.91281,1.90155,1.93795,2.07206,2.0219,2.0025,2.02949,1.91081,1.96521,1.93711,2.08147,1.93344,2.0599,1.99613,2.04089,2.05963,2.0587,2.07877,1.96161,2.09094,2.09658,2.08877,2.0437,2.00708,1.9776,1.98715,1.90519,1.92677,1.90418,2.04412,1.98247,1.90228,1.98601,1.92532,1.90359,2.03963,2.03818,2.04761,1.95679,1.95711,1.94462,1.96786,1.97377,1.9442,1.93617,1.92369,2.04536,1.91141,1.98268,3.07846,3.03696,2.99221,2.91195,3.0265,3.04995,3.00423,3.00317,2.92867,2.91883,2.94406,2.94665,2.99746,3.08338,3.07484,2.95552,3.06316,3.088,3.06905,2.97979,3.05721,3.03079,3.0313,2.96758,2.98426,2.96738,2.92287,2.9123,3.01421,3.09721,2.90245,2.90794,3.02011,3.05723,2.99774,2.95269,2.97317,3.03751,3.01487,3.06129,3.01867,2.98535,3.09915,3.09755,2.97918,3.07256,2.90788,3.0762,2.95258,3.06999,4.01504,4.02779,3.91971,4.06255,3.94126,3.90753,3.97771,3.98888,4.03836,4.05997,3.9962,4.08664,4.01249,4.0522,4.00013,4.08618,3.98813,4.02388,3.98998,3.97063,3.9598,4.09897,4.0436,3.91932,4.09961,4.08971,4.06116,4.00382,3.94312,3.99247,3.97329,4.02014,4.08667,3.9028,4.07035,4.0646,4.06615,3.9819,4.03153,4.00624,4.03815,4.08477,4.06903,3.98133,4.06275,3.95658,3.96768,4.05212,3.93245,4.07526,0.945538,0.969922,0.992289,0.991084,0.937371,1.02332,0.945957,0.961855,1.09723,1.06202,1.03651,1.06633,0.935325,0.910242,0.959377,1.0318,0.915694,0.957395,0.969224,0.953948,0.994963,1.01717,0.99142,0.914234,0.998141,1.07444,1.01498,0.932173,1.0635,0.934866,0.93357,1.03631,1.08196,0.976139,0.983563,1.05829,0.974638,0.932248,1.09049,0.931058,0.991057,0.938831,1.05418,1.04077,1.05493,1.03612,0.905735,0.954109,1.0978,1.06384,2.05635,1.92366,2.04029,1.94676,1.96829,1.92521,1.95604,1.99037,2.05938,2.02901,2.08345,2.06918,2.09708,2.02096,1.96048,1.93818,1.98403,1.92227,2.05416,2.00031,1.99315,2.07324,2.01828,1.94329,2.0066,1.96394,1.97831,1.99134,1.91462,1.96429,1.90207,1.953,1.98769,1.9473,2.07953,1.98482,2.00513,2.00112,1.90755,2.00049,1.96594,1.99998,1.96735,2.01886,1.9166,2.06687,1.97876,1.98066,2.07823,1.92761,3.07896,3.01594,3.02056,3.01229,3.06626,2.97277,2.97058,2.95917,2.91243,2.92732,2.99362,2.92032,3.06585,3.09918,2.93508,2.97442,2.94614,3.03668,3.05164,2.95687,3.02294,3.04288,2.95384,3.03926,2.95966,2.95344,2.99852,2.99199,2.97741,3.09599,3.02709,2.94176,3.08449,3.00188,2.98593,2.90189,3.01228,3.01576,3.03106,3.09208,2.93609,2.98447,2.97174,2.9564,3.012,3.07774,2.97636,3.04657,2.98996,2.93217,4.02509,3.93749,4.01377,3.96586,4.01551,4.07204,4.09348,4.01097,3.93873,3.98591,4.07945,3.90138,3.9848,4.0258,3.96922,4.01321,4.08809,4.09462,4.06559,3.99467,3.97089,3.95562,3.95811,4.00466,4.06786,4.09954,4.04802,3.90098,4.09055,3.93183,3.92213,4.06919,3.97383,4.04464,3.9812,4.093,3.98549,3.93366,3.94074,3.95704,4.01376,3.92651,3.91844,3.92513,4.07683,3.93012,4.07709,4.0717,3.99933,3.90974), ncol=2)
;
puntos=matrix(data=c(0.904401,0.916621,1.09063,1.00129,0.966211,1.09017,1.07587,0.949673,1.07456,1.02593,1.06119,0.969373,1.08062,0.98824,1.00273,0.920815,0.918978,0.925544,1.02364,1.0049,1.02373,1.02807,0.965717,0.988794,1.09504,0.978032,0.981618,1.09246,0.904894,1.07993,0.927593,1.07276,0.976955,0.946894,1.07835,0.950302,0.983747,1.02594,1.07049,1.09532,0.923794,0.957943,1.0393,1.03995,1.04587,0.951143,1.07355,1.08032,0.918632,0.964742,0.966578,0.92392,1.06265,1.042,0.982582,0.975958,1.06247,1.04517,1.09243,0.985139,0.976001,0.93569,0.980822,0.946444,1.07328,0.956787,0.913521,1.02963,1.06446,0.957109,0.948057,1.02459,1.03361,1.06386,0.942434,1.01304,1.01739,0.901545,0.998328,1.03351,1.07502,0.929244,1.02575,0.965289,1.06387,1.08196,0.987774,1.06418,0.956663,0.904854,0.923973,0.907512,1.02045,0.971618,0.974438,0.930345,1.061,0.947898,0.979063,0.968647,1.05432,1.06298,1.04662,1.02927,0.99311,1.07029,0.985494,0.979361,0.994822,1.08208,1.01529,0.984304,1.0661,0.950384,1.03076,0.939839,0.973889,0.972329,1.09585,1.0132,1.06308,1.052,0.970913,0.972636,0.910511,0.996434,0.923556,0.978989,0.988031,1.05658,0.959066,1.00607,0.952856,0.901177,1.08939,1.03941,1.07103,0.903405,1.03561,1.00575,0.995722,1.01283,0.993934,1.07171,1.08977,0.912186,1.01643,0.957963,1.03222,1.0904,0.918439,1.00112,1.01402,1.03276,0.91943,1.08141,1.09913,0.917845,1.06427,1.03247,0.944496,0.999938,0.993656,0.904442,0.967304,1.09613,1.0847,0.958292,0.972112,0.997513,0.985578,1.04582,0.931425,1.01238,1.01753,0.981088,1.04039,0.976994,0.932125,0.919208,0.94118,0.976451,0.919566,1.01243,0.928365,0.963767,1.04902,1.07601,1.05625,1.05257,1.03649,1.0914,0.94178,1.0526,0.924108,0.961012,1.07444,0.995889,0.909352,0.996833,2.01391,2.08143,2.09667,2.06802,2.00332,2.098,1.95271,2.02795,1.97423,2.00416,2.07842,2.00345,1.98605,1.90651,1.95055,1.91452,2.08537,2.03451,1.90675,1.92022,2.00731,2.08415,1.96034,2.02332,1.90384,2.08253,1.98832,1.91094,1.93686,1.99795,2.07459,1.94748,2.06817,1.92217,1.9757,2.06754,2.0255,2.01868,1.94203,2.0166,2.09461,1.96689,1.96594,2.06848,2.07439,1.91984,2.02882,1.91708,2.00425,1.97461,2.01852,2.03163,1.99042,2.0191,2.01175,2.03887,1.93096,2.03011,1.98059,2.04649,1.93654,1.94923,1.92391,1.94395,1.99798,1.95819,2.06657,1.95773,1.93198,2.03207,1.9413,2.03232,2.08726,1.94353,1.95367,2.07841,2.08574,1.9164,2.08779,1.95523,1.94145,1.9787,1.92364,2.0374,2.0766,2.0681,1.90053,1.98141,1.92094,2.09341,1.99273,1.96504,1.94564,2.01853,2.07556,1.97157,2.05315,1.93052,1.93481,1.94961,2.07818,2.01152,1.90518,2.0809,2.04292,2.09368,2.07534,1.94105,2.09785,2.02901,1.9759,1.90834,2.08113,1.91722,1.90487,1.93524,1.9244,1.91149,1.95046,2.06223,1.93099,1.99638,1.93111,1.96574,2.06619,2.08599,1.9248,2.08267,2.08131,2.03907,2.06354,1.93475,2.03842,2.08237,1.98784,2.03039,2.00239,2.02745,2.04521,1.93095,2.04513,2.01194,2.06867,1.98288,1.99964,2.06934,2.06585,2.02971,2.00787,2.07155,1.95707,2.08108,2.09899,2.07214,2.09575,2.00903,2.02105,2.00681,2.01013,1.98282,2.08517,1.92155,2.08379,1.99453,2.09316,2.05395,1.9648,2.03463,1.98532,2.05777,2.07583,1.9024,2.06918,2.07466,2.00522,1.93406,1.9157,2.02283,1.94833,1.93705,2.00129,2.03977,2.07271,2.0703,1.96047,1.96325,2.00976,2.00306,1.91851,2.03053,1.96005,1.95059,1.96083,1.90793,1.97317,1.9698,1.90877,1.96957,2.02147,2.09867,3.04943,2.97411,3.07308,2.94317,3.07331,3.07759,3.00627,2.97077,2.94845,2.91945,2.94786,2.95261,2.95903,3.0601,3.01513,3.08781,2.97042,2.97997,3.0781,2.95543,3.08214,3.05545,3.08714,2.92192,3.05456,3.03275,2.97673,3.07034,3.0739,3.01137,2.91169,3.02101,3.05294,3.07251,3.02444,3.08116,3.0511,3.03923,2.93887,2.95646,2.9539,3.06858,2.95753,3.0981,3.05977,2.94557,3.05945,3.06009,3.09039,3.05776,3.09399,3.00504,2.93455,2.91436,3.08947,2.90912,3.07768,3.04234,2.98696,3.05886,2.92592,2.96823,3.03219,3.03635,2.97425,2.96112,2.96204,2.93056,3.08028,2.9622,3.05565,3.03188,3.06846,3.00018,2.94594,2.92206,2.96777,2.96044,2.95328,3.05511,3.05827,2.92635,2.9802,3.07893,2.93948,3.04016,2.97169,3.05673,2.95587,2.95045,3.09504,2.94943,2.99677,2.97488,2.90353,2.94422,2.99998,3.0768,3.07548,2.97526,3.00137,2.98643,2.95359,2.92826,2.98429,3.09911,2.92177,3.05338,3.04759,2.92633,3.07407,3.061,2.98499,3.09011,2.9559,2.94582,2.92423,2.91649,3.07057,3.00409,3.08665,2.93577,2.9285,3.03182,3.0068,3.01505,3.06799,2.96832,3.06339,2.92397,2.92983,3.00489,3.03936,2.97007,2.98625,2.99782,2.97319,2.9136,3.099,2.90133,3.0057,3.01551,2.99205,3.00456,3.02948,2.92747,2.99484,3.01871,2.97166,3.06255,3.06727,3.06609,2.9708,3.04834,2.94659,2.94825,3.08223,3.02844,2.99334,3.04741,3.09759,3.04832,3.03,2.97222,3.06122,2.91342,2.95631,2.93607,2.91766,3.0726,2.95875,3.04911,2.94879,2.93301,2.94591,3.07473,2.95999,3.08464,2.95539,2.94895,3.07749,3.07928,3.00651,3.0886,2.95056,3.09587,2.96,3.05717,2.91476,3.07317,3.01187,2.92004,2.90142,3.05051,2.9265,2.97372,3.07857,3.04267,3.09158,3.01458,4.0944,3.90813,4.09677,4.02791,3.90889,3.90936,3.91779,4.07047,3.92327,3.99439,4.06507,4.02076,3.9337,4.07567,4.05492,3.9446,3.92291,4.07246,4.05585,4.06511,4.09397,4.04405,3.90764,3.91534,3.90516,3.98714,4.00779,4.08196,4.01038,3.99552,4.01603,3.90739,4.04118,3.98067,3.92605,3.91957,3.98988,3.96689,4.08751,3.99714,4.03773,3.98102,4.05159,3.90836,3.95771,4.06988,4.05311,4.03733,4.09107,3.94541,4.00087,3.96435,3.94985,4.05099,4.03343,3.91061,4.01909,4.00547,4.03847,4.08113,4.02437,3.90078,4.05569,3.96587,3.9823,4.08264,3.91398,3.97683,4.09693,3.93167,4.08298,4.09496,3.97203,4.05222,4.06451,4.06321,4.01899,3.9465,3.98984,3.91595,3.97125,4.07562,4.08723,4.04392,3.91921,4.06587,3.9258,4.08201,4.01154,3.94454,3.95749,4.01564,3.97526,4.00268,3.99565,3.98425,3.98861,4.07633,3.99366,4.04119,4.09593,4.08202,3.97845,4.02378,3.92594,4.09229,4.09739,3.91005,3.95368,3.91316,3.97102,4.03019,4.02827,4.0674,4.0792,4.00275,4.07535,4.09976,4.02429,3.97721,4.0325,4.03895,4.09508,4.01264,3.94767,4.06601,3.95898,4.07863,3.96946,3.94146,4.02543,4.03884,3.96572,4.09612,3.90415,4.00751,4.05682,3.98591,4.08302,4.07735,4.03668,3.91169,3.97986,4.09138,4.04156,4.00388,3.95354,4.0566,4.02644,4.07733,4.0714,4.03194,3.90659,4.09402,4.05063,3.95734,3.93253,3.94398,3.95251,4.08114,4.00185,4.0923,3.94745,3.91576,3.91782,4.08788,3.98277,3.91819,3.96403,4.07288,4.01295,3.94864,4.097,3.95863,4.09484,4.07878,3.91694,3.91122,4.02962,4.07674,3.94596,3.92144,3.96676,4.05721,3.98032,4.02332,3.91867,4.06334,3.9122,4.03962,3.90598,3.97295,3.98814,4.04511,4.00729,3.95088,4.01373,3.91992,3.95308,3.98101,0.944807,0.933406,1.08475,1.0894,1.02181,0.915205,0.936887,0.936063,0.989528,0.918325,1.01631,1.02123,1.01926,1.07601,1.02316,1.08723,1.04448,1.04072,0.942685,1.03823,0.92981,0.995604,0.996544,0.912397,1.06326,0.993592,1.09918,0.990677,0.956675,1.05334,1.01632,1.03029,0.962152,1.02705,1.00849,1.02223,0.919744,0.917323,1.08522,1.06801,1.03823,1.03625,1.03632,0.956981,1.07267,0.910121,1.08872,0.925455,1.09785,0.980008,2.01082,1.97329,1.98935,1.93023,1.96915,2.02181,1.90945,2.06644,1.96999,1.97507,2.0014,2.00572,1.98116,1.9488,1.93996,1.94971,2.00413,1.96046,1.95799,1.99457,2.09037,2.04761,2.06832,1.98777,2.08968,2.02925,2.03088,2.06185,1.90239,1.90435,2.07186,2.04709,1.93062,1.97637,1.91345,1.94933,2.01781,1.9489,1.94943,2.00451,2.03868,2.04141,1.91414,1.90148,2.02217,1.96686,2.08903,1.99786,1.91566,2.02474,3.06941,2.95,2.97994,2.92116,3.06337,2.94808,3.08238,2.91637,3.02068,3.05859,2.90809,2.95346,3.09294,3.03051,3.06869,2.95567,2.96616,3.07197,2.97687,2.93977,3.06136,3.00826,2.98987,2.94817,2.99951,2.95607,3.05866,3.02674,2.96257,2.90319,3.08655,3.00156,2.92799,2.99392,2.91293,3.09107,3.05695,3.06285,3.01506,2.96707,3.04753,2.97013,3.06491,2.98113,2.98733,3.00598,2.96565,2.90553,3.09994,2.93078,4.01307,4.05713,3.97681,4.09553,4.08392,3.92246,3.96436,3.91209,3.92328,3.96362,3.93273,4.0734,4.07743,4.08824,3.96992,4.05719,4.04024,4.03672,4.03837,4.00567,4.06293,3.9227,3.92787,4.0201,3.90458,4.06816,3.98801,4.00287,3.93164,3.94081,4.05843,3.93921,3.98451,3.90515,4.06079,3.98428,3.99397,4.08426,4.03998,4.01957,4.05231,3.96804,4.07955,4.03089,4.0844,3.90844,3.94107,4.05108,4.00659,3.9276,0.929668,0.935893,0.943333,0.927067,1.02909,1.06565,0.972446,0.979183,1.07332,0.949806,1.03382,0.937717,0.940519,1.00489,0.953929,0.994932,1.01959,1.06294,0.985128,0.903122,1.07221,0.992889,0.968369,1.00239,1.0844,0.923409,1.06641,0.989049,0.929225,0.921309,1.00707,0.944355,1.05198,1.07705,1.05441,1.06028,1.01374,0.979803,1.03396,0.958696,0.955493,0.961814,1.04326,0.976847,1.04875,0.93982,1.06362,1.01959,1.02338,0.980892,1.93021,1.95436,2.07112,2.00365,1.9783,1.99692,1.9273,2.06088,1.95548,1.92605,2.03058,2.08938,1.99243,1.92218,2.03887,1.97628,2.02769,2.01769,2.06019,2.0621,1.98485,2.05872,1.90811,1.94501,2.09323,2.07105,1.91717,1.93122,1.99189,1.99397,1.92685,1.98783,2.03668,1.91845,2.00421,2.08894,2.03503,2.09899,1.9636,2.01835,1.95088,2.02224,2.03167,1.93219,2.06419,2.09127,1.98115,2.03281,2.04928,1.905,3.02408,2.93096,2.92319,3.09665,2.9999,3.08893,2.98608,3.00136,3.08774,2.93088,2.90947,3.03116,2.98004,3.05137,2.97721,3.04177,3.06972,2.9337,2.99957,3.02259,3.03621,2.90661,3.02611,3.08195,3.00008,2.96146,2.9376,2.92146,3.00014,2.9827,3.01876,3.05241,2.96086,2.91677,2.95106,2.93138,2.97391,3.0515,3.06213,2.97489,2.99322,2.93606,3.08737,2.97624,2.92635,3.03679,3.01507,3.07817,2.9988,2.92852,4.0615,4.08166,3.97004,3.97229,3.91674,3.97159,3.98025,4.08753,3.97287,3.98644,4.05168,4.0391,3.96897,4.0541,3.96061,3.93475,3.93933,4.0369,3.9101,3.99601,4.08638,3.95476,4.07066,3.96882,3.922,3.93774,4.09172,4.06986,3.99481,3.96559,4.05128,3.98354,4.07832,3.91764,3.94839,4.01286,4.06021,4.00235,3.97863,3.96442,4.07138,4.09772,3.95065,3.92021,4.04378,3.93636,4.02909,4.04301,4.03028,3.98834,1.05002,1.04667,0.948652,1.07186,0.931714,0.925287,0.907956,1.06836,0.927358,1.05957,0.933,0.944207,0.95841,0.997306,0.981023,1.09067,0.915163,1.04069,1.06317,1.03229,1.09527,1.02652,1.08539,1.00135,1.00408,0.938319,1.07711,1.08893,1.05889,0.927512,1.03398,0.949586,1.09334,0.923555,1.04256,1.09424,1.09567,1.01161,0.900953,1.08706,0.976323,1.04563,0.909542,0.991678,1.09867,0.933205,0.971462,0.954506,0.969255,0.936162,2.03317,1.91281,1.90155,1.93795,2.07206,2.0219,2.0025,2.02949,1.91081,1.96521,1.93711,2.08147,1.93344,2.0599,1.99613,2.04089,2.05963,2.0587,2.07877,1.96161,2.09094,2.09658,2.08877,2.0437,2.00708,1.9776,1.98715,1.90519,1.92677,1.90418,2.04412,1.98247,1.90228,1.98601,1.92532,1.90359,2.03963,2.03818,2.04761,1.95679,1.95711,1.94462,1.96786,1.97377,1.9442,1.93617,1.92369,2.04536,1.91141,1.98268,3.07846,3.03696,2.99221,2.91195,3.0265,3.04995,3.00423,3.00317,2.92867,2.91883,2.94406,2.94665,2.99746,3.08338,3.07484,2.95552,3.06316,3.088,3.06905,2.97979,3.05721,3.03079,3.0313,2.96758,2.98426,2.96738,2.92287,2.9123,3.01421,3.09721,2.90245,2.90794,3.02011,3.05723,2.99774,2.95269,2.97317,3.03751,3.01487,3.06129,3.01867,2.98535,3.09915,3.09755,2.97918,3.07256,2.90788,3.0762,2.95258,3.06999,4.01504,4.02779,3.91971,4.06255,3.94126,3.90753,3.97771,3.98888,4.03836,4.05997,3.9962,4.08664,4.01249,4.0522,4.00013,4.08618,3.98813,4.02388,3.98998,3.97063,3.9598,4.09897,4.0436,3.91932,4.09961,4.08971,4.06116,4.00382,3.94312,3.99247,3.97329,4.02014,4.08667,3.9028,4.07035,4.0646,4.06615,3.9819,4.03153,4.00624,4.03815,4.08477,4.06903,3.98133,4.06275,3.95658,3.96768,4.05212,3.93245,4.07526,0.945538,0.969922,0.992289,0.991084,0.937371,1.02332,0.945957,0.961855,1.09723,1.06202,1.03651,1.06633,0.935325,0.910242,0.959377,1.0318,0.915694,0.957395,0.969224,0.953948,0.994963,1.01717,0.99142,0.914234,0.998141,1.07444,1.01498,0.932173,1.0635,0.934866,0.93357,1.03631,1.08196,0.976139,0.983563,1.05829,0.974638,0.932248,1.09049,0.931058,0.991057,0.938831,1.05418,1.04077,1.05493,1.03612,0.905735,0.954109,1.0978,1.06384,2.05635,1.92366,2.04029,1.94676,1.96829,1.92521,1.95604,1.99037,2.05938,2.02901,2.08345,2.06918,2.09708,2.02096,1.96048,1.93818,1.98403,1.92227,2.05416,2.00031,1.99315,2.07324,2.01828,1.94329,2.0066,1.96394,1.97831,1.99134,1.91462,1.96429,1.90207,1.953,1.98769,1.9473,2.07953,1.98482,2.00513,2.00112,1.90755,2.00049,1.96594,1.99998,1.96735,2.01886,1.9166,2.06687,1.97876,1.98066,2.07823,1.92761,3.07896,3.01594,3.02056,3.01229,3.06626,2.97277,2.97058,2.95917,2.91243,2.92732,2.99362,2.92032,3.06585,3.09918,2.93508,2.97442,2.94614,3.03668,3.05164,2.95687,3.02294,3.04288,2.95384,3.03926,2.95966,2.95344,2.99852,2.99199,2.97741,3.09599,3.02709,2.94176,3.08449,3.00188,2.98593,2.90189,3.01228,3.01576,3.03106,3.09208,2.93609,2.98447,2.97174,2.9564,3.012,3.07774,2.97636,3.04657,2.98996,2.93217,4.02509,3.93749,4.01377,3.96586,4.01551,4.07204,4.09348,4.01097,3.93873,3.98591,4.07945,3.90138,3.9848,4.0258,3.96922,4.01321,4.08809,4.09462,4.06559,3.99467,3.97089,3.95562,3.95811,4.00466,4.06786,4.09954,4.04802,3.90098,4.09055,3.93183,3.92213,4.06919,3.97383,4.04464,3.9812,4.093,3.98549,3.93366,3.94074,3.95704,4.01376,3.92651,3.91844,3.92513,4.07683,3.93012,4.07709,4.0717,3.99933,3.90974,), ncol=2)
)
;
c(0.904401,0.916621,1.09063,1.00129,0.966211,1.09017,1.07587,0.949673,1.07456,1.02593,1.06119,0.969373,1.08062,0.98824,1.00273,0.920815,0.918978,0.925544,1.02364,1.0049,1.02373,1.02807,0.965717,0.988794,1.09504,0.978032,0.981618,1.09246,0.904894,1.07993,0.927593,1.07276,0.976955,0.946894,1.07835,0.950302,0.983747,1.02594,1.07049,1.09532,0.923794,0.957943,1.0393,1.03995,1.04587,0.951143,1.07355,1.08032,0.918632,0.964742,0.966578,0.92392,1.06265,1.042,0.982582,0.975958,1.06247,1.04517,1.09243,0.985139,0.976001,0.93569,0.980822,0.946444,1.07328,0.956787,0.913521,1.02963,1.06446,0.957109,0.948057,1.02459,1.03361,1.06386,0.942434,1.01304,1.01739,0.901545,0.998328,1.03351,1.07502,0.929244,1.02575,0.965289,1.06387,1.08196,0.987774,1.06418,0.956663,0.904854,0.923973,0.907512,1.02045,0.971618,0.974438,0.930345,1.061,0.947898,0.979063,0.968647,1.05432,1.06298,1.04662,1.02927,0.99311,1.07029,0.985494,0.979361,0.994822,1.08208,1.01529,0.984304,1.0661,0.950384,1.03076,0.939839,0.973889,0.972329,1.09585,1.0132,1.06308,1.052,0.970913,0.972636,0.910511,0.996434,0.923556,0.978989,0.988031,1.05658,0.959066,1.00607,0.952856,0.901177,1.08939,1.03941,1.07103,0.903405,1.03561,1.00575,0.995722,1.01283,0.993934,1.07171,1.08977,0.912186,1.01643,0.957963,1.03222,1.0904,0.918439,1.00112,1.01402,1.03276,0.91943,1.08141,1.09913,0.917845,1.06427,1.03247,0.944496,0.999938,0.993656,0.904442,0.967304,1.09613,1.0847,0.958292,0.972112,0.997513,0.985578,1.04582,0.931425,1.01238,1.01753,0.981088,1.04039,0.976994,0.932125,0.919208,0.94118,0.976451,0.919566,1.01243,0.928365,0.963767,1.04902,1.07601,1.05625,1.05257,1.03649,1.0914,0.94178,1.0526,0.924108,0.961012,1.07444,0.995889,0.909352,0.996833,2.01391,2.08143,2.09667,2.06802,2.00332,2.098,1.95271,2.02795,1.97423,2.00416,2.07842,2.00345,1.98605,1.90651,1.95055,1.91452,2.08537,2.03451,1.90675,1.92022,2.00731,2.08415,1.96034,2.02332,1.90384,2.08253,1.98832,1.91094,1.93686,1.99795,2.07459,1.94748,2.06817,1.92217,1.9757,2.06754,2.0255,2.01868,1.94203,2.0166,2.09461,1.96689,1.96594,2.06848,2.07439,1.91984,2.02882,1.91708,2.00425,1.97461,2.01852,2.03163,1.99042,2.0191,2.01175,2.03887,1.93096,2.03011,1.98059,2.04649,1.93654,1.94923,1.92391,1.94395,1.99798,1.95819,2.06657,1.95773,1.93198,2.03207,1.9413,2.03232,2.08726,1.94353,1.95367,2.07841,2.08574,1.9164,2.08779,1.95523,1.94145,1.9787,1.92364,2.0374,2.0766,2.0681,1.90053,1.98141,1.92094,2.09341,1.99273,1.96504,1.94564,2.01853,2.07556,1.97157,2.05315,1.93052,1.93481,1.94961,2.07818,2.01152,1.90518,2.0809,2.04292,2.09368,2.07534,1.94105,2.09785,2.02901,1.9759,1.90834,2.08113,1.91722,1.90487,1.93524,1.9244,1.91149,1.95046,2.06223,1.93099,1.99638,1.93111,1.96574,2.06619,2.08599,1.9248,2.08267,2.08131,2.03907,2.06354,1.93475,2.03842,2.08237,1.98784,2.03039,2.00239,2.02745,2.04521,1.93095,2.04513,2.01194,2.06867,1.98288,1.99964,2.06934,2.06585,2.02971,2.00787,2.07155,1.95707,2.08108,2.09899,2.07214,2.09575,2.00903,2.02105,2.00681,2.01013,1.98282,2.08517,1.92155,2.08379,1.99453,2.09316,2.05395,1.9648,2.03463,1.98532,2.05777,2.07583,1.9024,2.06918,2.07466,2.00522,1.93406,1.9157,2.02283,1.94833,1.93705,2.00129,2.03977,2.07271,2.0703,1.96047,1.96325,2.00976,2.00306,1.91851,2.03053,1.96005,1.95059,1.96083,1.90793,1.97317,1.9698,1.90877,1.96957,2.02147,2.09867,3.04943,2.97411,3.07308,2.94317,3.07331,3.07759,3.00627,2.97077,2.94845,2.91945,2.94786,2.95261,2.95903,3.0601,3.01513,3.08781,2.97042,2.97997,3.0781,2.95543,3.08214,3.05545,3.08714,2.92192,3.05456,3.03275,2.97673,3.07034,3.0739,3.01137,2.91169,3.02101,3.05294,3.07251,3.02444,3.08116,3.0511,3.03923,2.93887,2.95646,2.9539,3.06858,2.95753,3.0981,3.05977,2.94557,3.05945,3.06009,3.09039,3.05776,3.09399,3.00504,2.93455,2.91436,3.08947,2.90912,3.07768,3.04234,2.98696,3.05886,2.92592,2.96823,3.03219,3.03635,2.97425,2.96112,2.96204,2.93056,3.08028,2.9622,3.05565,3.03188,3.06846,3.00018,2.94594,2.92206,2.96777,2.96044,2.95328,3.05511,3.05827,2.92635,2.9802,3.07893,2.93948,3.04016,2.97169,3.05673,2.95587,2.95045,3.09504,2.94943,2.99677,2.97488,2.90353,2.94422,2.99998,3.0768,3.07548,2.97526,3.00137,2.98643,2.95359,2.92826,2.98429,3.09911,2.92177,3.05338,3.04759,2.92633,3.07407,3.061,2.98499,3.09011,2.9559,2.94582,2.92423,2.91649,3.07057,3.00409,3.08665,2.93577,2.9285,3.03182,3.0068,3.01505,3.06799,2.96832,3.06339,2.92397,2.92983,3.00489,3.03936,2.97007,2.98625,2.99782,2.97319,2.9136,3.099,2.90133,3.0057,3.01551,2.99205,3.00456,3.02948,2.92747,2.99484,3.01871,2.97166,3.06255,3.06727,3.06609,2.9708,3.04834,2.94659,2.94825,3.08223,3.02844,2.99334,3.04741,3.09759,3.04832,3.03,2.97222,3.06122,2.91342,2.95631,2.93607,2.91766,3.0726,2.95875,3.04911,2.94879,2.93301,2.94591,3.07473,2.95999,3.08464,2.95539,2.94895,3.07749,3.07928,3.00651,3.0886,2.95056,3.09587,2.96,3.05717,2.91476,3.07317,3.01187,2.92004,2.90142,3.05051,2.9265,2.97372,3.07857,3.04267,3.09158,3.01458,4.0944,3.90813,4.09677,4.02791,3.90889,3.90936,3.91779,4.07047,3.92327,3.99439,4.06507,4.02076,3.9337,4.07567,4.05492,3.9446,3.92291,4.07246,4.05585,4.06511,4.09397,4.04405,3.90764,3.91534,3.90516,3.98714,4.00779,4.08196,4.01038,3.99552,4.01603,3.90739,4.04118,3.98067,3.92605,3.91957,3.98988,3.96689,4.08751,3.99714,4.03773,3.98102,4.05159,3.90836,3.95771,4.06988,4.05311,4.03733,4.09107,3.94541,4.00087,3.96435,3.94985,4.05099,4.03343,3.91061,4.01909,4.00547,4.03847,4.08113,4.02437,3.90078,4.05569,3.96587,3.9823,4.08264,3.91398,3.97683,4.09693,3.93167,4.08298,4.09496,3.97203,4.05222,4.06451,4.06321,4.01899,3.9465,3.98984,3.91595,3.97125,4.07562,4.08723,4.04392,3.91921,4.06587,3.9258,4.08201,4.01154,3.94454,3.95749,4.01564,3.97526,4.00268,3.99565,3.98425,3.98861,4.07633,3.99366,4.04119,4.09593,4.08202,3.97845,4.02378,3.92594,4.09229,4.09739,3.91005,3.95368,3.91316,3.97102,4.03019,4.02827,4.0674,4.0792,4.00275,4.07535,4.09976,4.02429,3.97721,4.0325,4.03895,4.09508,4.01264,3.94767,4.06601,3.95898,4.07863,3.96946,3.94146,4.02543,4.03884,3.96572,4.09612,3.90415,4.00751,4.05682,3.98591,4.08302,4.07735,4.03668,3.91169,3.97986,4.09138,4.04156,4.00388,3.95354,4.0566,4.02644,4.07733,4.0714,4.03194,3.90659,4.09402,4.05063,3.95734,3.93253,3.94398,3.95251,4.08114,4.00185,4.0923,3.94745,3.91576,3.91782,4.08788,3.98277,3.91819,3.96403,4.07288,4.01295,3.94864,4.097,3.95863,4.09484,4.07878,3.91694,3.91122,4.02962,4.07674,3.94596,3.92144,3.96676,4.05721,3.98032,4.02332,3.91867,4.06334,3.9122,4.03962,3.90598,3.97295,3.98814,4.04511,4.00729,3.95088,4.01373,3.91992,3.95308,3.98101,0.944807,0.933406,1.08475,1.0894,1.02181,0.915205,0.936887,0.936063,0.989528,0.918325,1.01631,1.02123,1.01926,1.07601,1.02316,1.08723,1.04448,1.04072,0.942685,1.03823,0.92981,0.995604,0.996544,0.912397,1.06326,0.993592,1.09918,0.990677,0.956675,1.05334,1.01632,1.03029,0.962152,1.02705,1.00849,1.02223,0.919744,0.917323,1.08522,1.06801,1.03823,1.03625,1.03632,0.956981,1.07267,0.910121,1.08872,0.925455,1.09785,0.980008,2.01082,1.97329,1.98935,1.93023,1.96915,2.02181,1.90945,2.06644,1.96999,1.97507,2.0014,2.00572,1.98116,1.9488,1.93996,1.94971,2.00413,1.96046,1.95799,1.99457,2.09037,2.04761,2.06832,1.98777,2.08968,2.02925,2.03088,2.06185,1.90239,1.90435,2.07186,2.04709,1.93062,1.97637,1.91345,1.94933,2.01781,1.9489,1.94943,2.00451,2.03868,2.04141,1.91414,1.90148,2.02217,1.96686,2.08903,1.99786,1.91566,2.02474,3.06941,2.95,2.97994,2.92116,3.06337,2.94808,3.08238,2.91637,3.02068,3.05859,2.90809,2.95346,3.09294,3.03051,3.06869,2.95567,2.96616,3.07197,2.97687,2.93977,3.06136,3.00826,2.98987,2.94817,2.99951,2.95607,3.05866,3.02674,2.96257,2.90319,3.08655,3.00156,2.92799,2.99392,2.91293,3.09107,3.05695,3.06285,3.01506,2.96707,3.04753,2.97013,3.06491,2.98113,2.98733,3.00598,2.96565,2.90553,3.09994,2.93078,4.01307,4.05713,3.97681,4.09553,4.08392,3.92246,3.96436,3.91209,3.92328,3.96362,3.93273,4.0734,4.07743,4.08824,3.96992,4.05719,4.04024,4.03672,4.03837,4.00567,4.06293,3.9227,3.92787,4.0201,3.90458,4.06816,3.98801,4.00287,3.93164,3.94081,4.05843,3.93921,3.98451,3.90515,4.06079,3.98428,3.99397,4.08426,4.03998,4.01957,4.05231,3.96804,4.07955,4.03089,4.0844,3.90844,3.94107,4.05108,4.00659,3.9276,0.929668,0.935893,0.943333,0.927067,1.02909,1.06565,0.972446,0.979183,1.07332,0.949806,1.03382,0.937717,0.940519,1.00489,0.953929,0.994932,1.01959,1.06294,0.985128,0.903122,1.07221,0.992889,0.968369,1.00239,1.0844,0.923409,1.06641,0.989049,0.929225,0.921309,1.00707,0.944355,1.05198,1.07705,1.05441,1.06028,1.01374,0.979803,1.03396,0.958696,0.955493,0.961814,1.04326,0.976847,1.04875,0.93982,1.06362,1.01959,1.02338,0.980892,1.93021,1.95436,2.07112,2.00365,1.9783,1.99692,1.9273,2.06088,1.95548,1.92605,2.03058,2.08938,1.99243,1.92218,2.03887,1.97628,2.02769,2.01769,2.06019,2.0621,1.98485,2.05872,1.90811,1.94501,2.09323,2.07105,1.91717,1.93122,1.99189,1.99397,1.92685,1.98783,2.03668,1.91845,2.00421,2.08894,2.03503,2.09899,1.9636,2.01835,1.95088,2.02224,2.03167,1.93219,2.06419,2.09127,1.98115,2.03281,2.04928,1.905,3.02408,2.93096,2.92319,3.09665,2.9999,3.08893,2.98608,3.00136,3.08774,2.93088,2.90947,3.03116,2.98004,3.05137,2.97721,3.04177,3.06972,2.9337,2.99957,3.02259,3.03621,2.90661,3.02611,3.08195,3.00008,2.96146,2.9376,2.92146,3.00014,2.9827,3.01876,3.05241,2.96086,2.91677,2.95106,2.93138,2.97391,3.0515,3.06213,2.97489,2.99322,2.93606,3.08737,2.97624,2.92635,3.03679,3.01507,3.07817,2.9988,2.92852,4.0615,4.08166,3.97004,3.97229,3.91674,3.97159,3.98025,4.08753,3.97287,3.98644,4.05168,4.0391,3.96897,4.0541,3.96061,3.93475,3.93933,4.0369,3.9101,3.99601,4.08638,3.95476,4.07066,3.96882,3.922,3.93774,4.09172,4.06986,3.99481,3.96559,4.05128,3.98354,4.07832,3.91764,3.94839,4.01286,4.06021,4.00235,3.97863,3.96442,4.07138,4.09772,3.95065,3.92021,4.04378,3.93636,4.02909,4.04301,4.03028,3.98834,1.05002,1.04667,0.948652,1.07186,0.931714,0.925287,0.907956,1.06836,0.927358,1.05957,0.933,0.944207,0.95841,0.997306,0.981023,1.09067,0.915163,1.04069,1.06317,1.03229,1.09527,1.02652,1.08539,1.00135,1.00408,0.938319,1.07711,1.08893,1.05889,0.927512,1.03398,0.949586,1.09334,0.923555,1.04256,1.09424,1.09567,1.01161,0.900953,1.08706,0.976323,1.04563,0.909542,0.991678,1.09867,0.933205,0.971462,0.954506,0.969255,0.936162,2.03317,1.91281,1.90155,1.93795,2.07206,2.0219,2.0025,2.02949,1.91081,1.96521,1.93711,2.08147,1.93344,2.0599,1.99613,2.04089,2.05963,2.0587,2.07877,1.96161,2.09094,2.09658,2.08877,2.0437,2.00708,1.9776,1.98715,1.90519,1.92677,1.90418,2.04412,1.98247,1.90228,1.98601,1.92532,1.90359,2.03963,2.03818,2.04761,1.95679,1.95711,1.94462,1.96786,1.97377,1.9442,1.93617,1.92369,2.04536,1.91141,1.98268,3.07846,3.03696,2.99221,2.91195,3.0265,3.04995,3.00423,3.00317,2.92867,2.91883,2.94406,2.94665,2.99746,3.08338,3.07484,2.95552,3.06316,3.088,3.06905,2.97979,3.05721,3.03079,3.0313,2.96758,2.98426,2.96738,2.92287,2.9123,3.01421,3.09721,2.90245,2.90794,3.02011,3.05723,2.99774,2.95269,2.97317,3.03751,3.01487,3.06129,3.01867,2.98535,3.09915,3.09755,2.97918,3.07256,2.90788,3.0762,2.95258,3.06999,4.01504,4.02779,3.91971,4.06255,3.94126,3.90753,3.97771,3.98888,4.03836,4.05997,3.9962,4.08664,4.01249,4.0522,4.00013,4.08618,3.98813,4.02388,3.98998,3.97063,3.9598,4.09897,4.0436,3.91932,4.09961,4.08971,4.06116,4.00382,3.94312,3.99247,3.97329,4.02014,4.08667,3.9028,4.07035,4.0646,4.06615,3.9819,4.03153,4.00624,4.03815,4.08477,4.06903,3.98133,4.06275,3.95658,3.96768,4.05212,3.93245,4.07526,0.945538,0.969922,0.992289,0.991084,0.937371,1.02332,0.945957,0.961855,1.09723,1.06202,1.03651,1.06633,0.935325,0.910242,0.959377,1.0318,0.915694,0.957395,0.969224,0.953948,0.994963,1.01717,0.99142,0.914234,0.998141,1.07444,1.01498,0.932173,1.0635,0.934866,0.93357,1.03631,1.08196,0.976139,0.983563,1.05829,0.974638,0.932248,1.09049,0.931058,0.991057,0.938831,1.05418,1.04077,1.05493,1.03612,0.905735,0.954109,1.0978,1.06384,2.05635,1.92366,2.04029,1.94676,1.96829,1.92521,1.95604,1.99037,2.05938,2.02901,2.08345,2.06918,2.09708,2.02096,1.96048,1.93818,1.98403,1.92227,2.05416,2.00031,1.99315,2.07324,2.01828,1.94329,2.0066,1.96394,1.97831,1.99134,1.91462,1.96429,1.90207,1.953,1.98769,1.9473,2.07953,1.98482,2.00513,2.00112,1.90755,2.00049,1.96594,1.99998,1.96735,2.01886,1.9166,2.06687,1.97876,1.98066,2.07823,1.92761,3.07896,3.01594,3.02056,3.01229,3.06626,2.97277,2.97058,2.95917,2.91243,2.92732,2.99362,2.92032,3.06585,3.09918,2.93508,2.97442,2.94614,3.03668,3.05164,2.95687,3.02294,3.04288,2.95384,3.03926,2.95966,2.95344,2.99852,2.99199,2.97741,3.09599,3.02709,2.94176,3.08449,3.00188,2.98593,2.90189,3.01228,3.01576,3.03106,3.09208,2.93609,2.98447,2.97174,2.9564,3.012,3.07774,2.97636,3.04657,2.98996,2.93217,4.02509,3.93749,4.01377,3.96586,4.01551,4.07204,4.09348,4.01097,3.93873,3.98591,4.07945,3.90138,3.9848,4.0258,3.96922,4.01321,4.08809,4.09462,4.06559,3.99467,3.97089,3.95562,3.95811,4.00466,4.06786,4.09954,4.04802,3.90098,4.09055,3.93183,3.92213,4.06919,3.97383,4.04464,3.9812,4.093,3.98549,3.93366,3.94074,3.95704,4.01376,3.92651,3.91844,3.92513,4.07683,3.93012,4.07709,4.0717,3.99933,3.90974)
a
a=c(10)
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
c(0.904401,0.916621,1.09063,1.00129,0.966211,1.09017,1.07587,0.949673,1.07456,1.02593,1.06119,0.969373,1.08062,0.98824,1.00273,0.920815,0.918978,0.925544,1.02364,1.0049,1.02373,1.02807,0.965717,0.988794,1.09504,0.978032,0.981618,1.09246,0.904894,1.07993,0.927593,1.07276,0.976955,0.946894,1.07835,0.950302,0.983747,1.02594,1.07049,1.09532,0.923794,0.957943,1.0393,1.03995,1.04587,0.951143,1.07355,1.08032,0.918632,0.964742,0.966578,0.92392,1.06265,1.042,0.982582,0.975958,1.06247,1.04517,1.09243,0.985139,0.976001,0.93569,0.980822,0.946444,1.07328,0.956787,0.913521,1.02963,1.06446,0.957109,0.948057,1.02459,1.03361,1.06386,0.942434,1.01304,1.01739,0.901545,0.998328,1.03351,1.07502,0.929244,1.02575,0.965289,1.06387,1.08196,0.987774,1.06418,0.956663,0.904854,0.923973,0.907512,1.02045,0.971618,0.974438,0.930345,1.061,0.947898,0.979063,0.968647,1.05432,1.06298,1.04662,1.02927,0.99311,1.07029,0.985494,0.979361,0.994822,1.08208,1.01529,0.984304,1.0661,0.950384,1.03076,0.939839,0.973889,0.972329,1.09585,1.0132,1.06308,1.052,0.970913,0.972636,0.910511,0.996434,0.923556,0.978989,0.988031,1.05658,0.959066,1.00607,0.952856,0.901177,1.08939,1.03941,1.07103,0.903405,1.03561,1.00575,0.995722,1.01283,0.993934,1.07171,1.08977,0.912186,1.01643,0.957963,1.03222,1.0904,0.918439,1.00112,1.01402,1.03276,0.91943,1.08141,1.09913,0.917845,1.06427,1.03247,0.944496,0.999938,0.993656,0.904442,0.967304,1.09613,1.0847,0.958292,0.972112,0.997513,0.985578,1.04582,0.931425,1.01238,1.01753,0.981088,1.04039,0.976994,0.932125,0.919208,0.94118,0.976451,0.919566,1.01243,0.928365,0.963767,1.04902,1.07601,1.05625,1.05257,1.03649,1.0914,0.94178,1.0526,0.924108,0.961012,1.07444,0.995889,0.909352,0.996833,2.01391,2.08143,2.09667,2.06802,2.00332,2.098,1.95271,2.02795,1.97423,2.00416,2.07842,2.00345,1.98605,1.90651,1.95055,1.91452,2.08537,2.03451,1.90675,1.92022,2.00731,2.08415,1.96034,2.02332,1.90384,2.08253,1.98832,1.91094,1.93686,1.99795,2.07459,1.94748,2.06817,1.92217,1.9757,2.06754,2.0255,2.01868,1.94203,2.0166,2.09461,1.96689,1.96594,2.06848,2.07439,1.91984,2.02882,1.91708,2.00425,1.97461,2.01852,2.03163,1.99042,2.0191,2.01175,2.03887,1.93096,2.03011,1.98059,2.04649,1.93654,1.94923,1.92391,1.94395,1.99798,1.95819,2.06657,1.95773,1.93198,2.03207,1.9413,2.03232,2.08726,1.94353,1.95367,2.07841,2.08574,1.9164,2.08779,1.95523,1.94145,1.9787,1.92364,2.0374,2.0766,2.0681,1.90053,1.98141,1.92094,2.09341,1.99273,1.96504,1.94564,2.01853,2.07556,1.97157,2.05315,1.93052,1.93481,1.94961,2.07818,2.01152,1.90518,2.0809,2.04292,2.09368,2.07534,1.94105,2.09785,2.02901,1.9759,1.90834,2.08113,1.91722,1.90487,1.93524,1.9244,1.91149,1.95046,2.06223,1.93099,1.99638,1.93111,1.96574,2.06619,2.08599,1.9248,2.08267,2.08131,2.03907,2.06354,1.93475,2.03842,2.08237,1.98784,2.03039,2.00239,2.02745,2.04521,1.93095,2.04513,2.01194,2.06867,1.98288,1.99964,2.06934,2.06585,2.02971,2.00787,2.07155,1.95707,2.08108,2.09899,2.07214,2.09575,2.00903,2.02105,2.00681,2.01013,1.98282,2.08517,1.92155,2.08379,1.99453,2.09316,2.05395,1.9648,2.03463,1.98532,2.05777,2.07583,1.9024,2.06918,2.07466,2.00522,1.93406,1.9157,2.02283,1.94833,1.93705,2.00129,2.03977,2.07271,2.0703,1.96047,1.96325,2.00976,2.00306,1.91851,2.03053,1.96005,1.95059,1.96083,1.90793,1.97317,1.9698,1.90877,1.96957,2.02147,2.09867,3.04943,2.97411,3.07308,2.94317,3.07331,3.07759,3.00627,2.97077,2.94845,2.91945,2.94786,2.95261,2.95903,3.0601,3.01513,3.08781,2.97042,2.97997,3.0781,2.95543,3.08214,3.05545,3.08714,2.92192,3.05456,3.03275,2.97673,3.07034,3.0739,3.01137,2.91169,3.02101,3.05294,3.07251,3.02444,3.08116,3.0511,3.03923,2.93887,2.95646,2.9539,3.06858,2.95753,3.0981,3.05977,2.94557,3.05945,3.06009,3.09039,3.05776,3.09399,3.00504,2.93455,2.91436,3.08947,2.90912,3.07768,3.04234,2.98696,3.05886,2.92592,2.96823,3.03219,3.03635,2.97425,2.96112,2.96204,2.93056,3.08028,2.9622,3.05565,3.03188,3.06846,3.00018,2.94594,2.92206,2.96777,2.96044,2.95328,3.05511,3.05827,2.92635,2.9802,3.07893,2.93948,3.04016,2.97169,3.05673,2.95587,2.95045,3.09504,2.94943,2.99677,2.97488,2.90353,2.94422,2.99998,3.0768,3.07548,2.97526,3.00137,2.98643,2.95359,2.92826,2.98429,3.09911,2.92177,3.05338,3.04759,2.92633,3.07407,3.061,2.98499,3.09011,2.9559,2.94582,2.92423,2.91649,3.07057,3.00409,3.08665,2.93577,2.9285,3.03182,3.0068,3.01505,3.06799,2.96832,3.06339,2.92397,2.92983,3.00489,3.03936,2.97007,2.98625,2.99782,2.97319,2.9136,3.099,2.90133,3.0057,3.01551,2.99205,3.00456,3.02948,2.92747,2.99484,3.01871,2.97166,3.06255,3.06727,3.06609,2.9708,3.04834,2.94659,2.94825,3.08223,3.02844,2.99334,3.04741,3.09759,3.04832,3.03,2.97222,3.06122,2.91342,2.95631,2.93607,2.91766,3.0726,2.95875,3.04911,2.94879,2.93301,2.94591,3.07473,2.95999,3.08464,2.95539,2.94895,3.07749,3.07928,3.00651,3.0886,2.95056,3.09587,2.96,3.05717,2.91476,3.07317,3.01187,2.92004,2.90142,3.05051,2.9265,2.97372,3.07857,3.04267,3.09158,3.01458,4.0944,3.90813,4.09677,4.02791,3.90889,3.90936,3.91779,4.07047,3.92327,3.99439,4.06507,4.02076,3.9337,4.07567,4.05492,3.9446,3.92291,4.07246,4.05585,4.06511,4.09397,4.04405,3.90764,3.91534,3.90516,3.98714,4.00779,4.08196,4.01038,3.99552,4.01603,3.90739,4.04118,3.98067,3.92605,3.91957,3.98988,3.96689,4.08751,3.99714,4.03773,3.98102,4.05159,3.90836,3.95771,4.06988,4.05311,4.03733,4.09107,3.94541,4.00087,3.96435,3.94985,4.05099,4.03343,3.91061,4.01909,4.00547,4.03847,4.08113,4.02437,3.90078,4.05569,3.96587,3.9823,4.08264,3.91398,3.97683,4.09693,3.93167,4.08298,4.09496,3.97203,4.05222,4.06451,4.06321,4.01899,3.9465,3.98984,3.91595,3.97125,4.07562,4.08723,4.04392,3.91921,4.06587,3.9258,4.08201,4.01154,3.94454,3.95749,4.01564,3.97526,4.00268,3.99565,3.98425,3.98861,4.07633,3.99366,4.04119,4.09593,4.08202,3.97845,4.02378,3.92594,4.09229,4.09739,3.91005,3.95368,3.91316,3.97102,4.03019,4.02827,4.0674,4.0792,4.00275,4.07535,4.09976,4.02429,3.97721,4.0325,4.03895,4.09508,4.01264,3.94767,4.06601,3.95898,4.07863,3.96946,3.94146,4.02543,4.03884,3.96572,4.09612,3.90415,4.00751,4.05682,3.98591,4.08302,4.07735,4.03668,3.91169,3.97986,4.09138,4.04156,4.00388,3.95354,4.0566,4.02644,4.07733,4.0714,4.03194,3.90659,4.09402,4.05063,3.95734,3.93253,3.94398,3.95251,4.08114,4.00185,4.0923,3.94745,3.91576,3.91782,4.08788,3.98277,3.91819,3.96403,4.07288,4.01295,3.94864,4.097,3.95863,4.09484,4.07878,3.91694,3.91122,4.02962,4.07674,3.94596,3.92144,3.96676,4.05721,3.98032,4.02332,3.91867,4.06334,3.9122,4.03962,3.90598,3.97295,3.98814,4.04511,4.00729,3.95088,4.01373,3.91992,3.95308,3.98101,0.944807,0.933406,1.08475,1.0894,1.02181,0.915205,0.936887,0.936063,0.989528,0.918325,1.01631,1.02123,1.01926,1.07601,1.02316,1.08723,1.04448,1.04072,0.942685,1.03823,0.92981,0.995604,0.996544,0.912397,1.06326,0.993592,1.09918,0.990677,0.956675,1.05334,1.01632,1.03029,0.962152,1.02705,1.00849,1.02223,0.919744,0.917323,1.08522,1.06801,1.03823,1.03625,1.03632,0.956981,1.07267,0.910121,1.08872,0.925455,1.09785,0.980008,2.01082,1.97329,1.98935,1.93023,1.96915,2.02181,1.90945,2.06644,1.96999,1.97507,2.0014,2.00572,1.98116,1.9488,1.93996,1.94971,2.00413,1.96046,1.95799,1.99457,2.09037,2.04761,2.06832,1.98777,2.08968,2.02925,2.03088,2.06185,1.90239,1.90435,2.07186,2.04709,1.93062,1.97637,1.91345,1.94933,2.01781,1.9489,1.94943,2.00451,2.03868,2.04141,1.91414,1.90148,2.02217,1.96686,2.08903,1.99786,1.91566,2.02474,3.06941,2.95,2.97994,2.92116,3.06337,2.94808,3.08238,2.91637,3.02068,3.05859,2.90809,2.95346,3.09294,3.03051,3.06869,2.95567,2.96616,3.07197,2.97687,2.93977,3.06136,3.00826,2.98987,2.94817,2.99951,2.95607,3.05866,3.02674,2.96257,2.90319,3.08655,3.00156,2.92799,2.99392,2.91293,3.09107,3.05695,3.06285,3.01506,2.96707,3.04753,2.97013,3.06491,2.98113,2.98733,3.00598,2.96565,2.90553,3.09994,2.93078,4.01307,4.05713,3.97681,4.09553,4.08392,3.92246,3.96436,3.91209,3.92328,3.96362,3.93273,4.0734,4.07743,4.08824,3.96992,4.05719,4.04024,4.03672,4.03837,4.00567,4.06293,3.9227,3.92787,4.0201,3.90458,4.06816,3.98801,4.00287,3.93164,3.94081,4.05843,3.93921,3.98451,3.90515,4.06079,3.98428,3.99397,4.08426,4.03998,4.01957,4.05231,3.96804,4.07955,4.03089,4.0844,3.90844,3.94107,4.05108,4.00659,3.9276,0.929668,0.935893,0.943333,0.927067,1.02909,1.06565,0.972446,0.979183,1.07332,0.949806,1.03382,0.937717,0.940519,1.00489,0.953929,0.994932,1.01959,1.06294,0.985128,0.903122,1.07221,0.992889,0.968369,1.00239,1.0844,0.923409,1.06641,0.989049,0.929225,0.921309,1.00707,0.944355,1.05198,1.07705,1.05441,1.06028,1.01374,0.979803,1.03396,0.958696,0.955493,0.961814,1.04326,0.976847,1.04875,0.93982,1.06362,1.01959,1.02338,0.980892,1.93021,1.95436,2.07112,2.00365,1.9783,1.99692,1.9273,2.06088,1.95548,1.92605,2.03058,2.08938,1.99243,1.92218,2.03887,1.97628,2.02769,2.01769,2.06019,2.0621,1.98485,2.05872,1.90811,1.94501,2.09323,2.07105,1.91717,1.93122,1.99189,1.99397,1.92685,1.98783,2.03668,1.91845,2.00421,2.08894,2.03503,2.09899,1.9636,2.01835,1.95088,2.02224,2.03167,1.93219,2.06419,2.09127,1.98115,2.03281,2.04928,1.905,3.02408,2.93096,2.92319,3.09665,2.9999,3.08893,2.98608,3.00136,3.08774,2.93088,2.90947,3.03116,2.98004,3.05137,2.97721,3.04177,3.06972,2.9337,2.99957,3.02259,3.03621,2.90661,3.02611,3.08195,3.00008,2.96146,2.9376,2.92146,3.00014,2.9827,3.01876,3.05241,2.96086,2.91677,2.95106,2.93138,2.97391,3.0515,3.06213,2.97489,2.99322,2.93606,3.08737,2.97624,2.92635,3.03679,3.01507,3.07817,2.9988,2.92852,4.0615,4.08166,3.97004,3.97229,3.91674,3.97159,3.98025,4.08753,3.97287,3.98644,4.05168,4.0391,3.96897,4.0541,3.96061,3.93475,3.93933,4.0369,3.9101,3.99601,4.08638,3.95476,4.07066,3.96882,3.922,3.93774,4.09172,4.06986,3.99481,3.96559,4.05128,3.98354,4.07832,3.91764,3.94839,4.01286,4.06021,4.00235,3.97863,3.96442,4.07138,4.09772,3.95065,3.92021,4.04378,3.93636,4.02909,4.04301,4.03028,3.98834,1.05002,1.04667,0.948652,1.07186,0.931714,0.925287,0.907956,1.06836,0.927358,1.05957,0.933,0.944207,0.95841,0.997306,0.981023,1.09067,0.915163,1.04069,1.06317,1.03229,1.09527,1.02652,1.08539,1.00135,1.00408,0.938319,1.07711,1.08893,1.05889,0.927512,1.03398,0.949586,1.09334,0.923555,1.04256,1.09424,1.09567,1.01161,0.900953,1.08706,0.976323,1.04563,0.909542,0.991678,1.09867,0.933205,0.971462,0.954506,0.969255,0.936162,2.03317,1.91281,1.90155,1.93795,2.07206,2.0219,2.0025,2.02949,1.91081,1.96521,1.93711,2.08147,1.93344,2.0599,1.99613,2.04089,2.05963,2.0587,2.07877,1.96161,2.09094,2.09658,2.08877,2.0437,2.00708,1.9776,1.98715,1.90519,1.92677,1.90418,2.04412,1.98247,1.90228,1.98601,1.92532,1.90359,2.03963,2.03818,2.04761,1.95679,1.95711,1.94462,1.96786,1.97377,1.9442,1.93617,1.92369,2.04536,1.91141,1.98268,3.07846,3.03696,2.99221,2.91195,3.0265,3.04995,3.00423,3.00317,2.92867,2.91883,2.94406,2.94665,2.99746,3.08338,3.07484,2.95552,3.06316,3.088,3.06905,2.97979,3.05721,3.03079,3.0313,2.96758,2.98426,2.96738,2.92287,2.9123,3.01421,3.09721,2.90245,2.90794,3.02011,3.05723,2.99774,2.95269,2.97317,3.03751,3.01487,3.06129,3.01867,2.98535,3.09915,3.09755,2.97918,3.07256,2.90788,3.0762,2.95258,3.06999,4.01504,4.02779,3.91971,4.06255,3.94126,3.90753,3.97771,3.98888,4.03836,4.05997,3.9962,4.08664,4.01249,4.0522,4.00013,4.08618,3.98813,4.02388,3.98998,3.97063,3.9598,4.09897,4.0436,3.91932,4.09961,4.08971,4.06116,4.00382,3.94312,3.99247,3.97329,4.02014,4.08667,3.9028,4.07035,4.0646,4.06615,3.9819,4.03153,4.00624,4.03815,4.08477,4.06903,3.98133,4.06275,3.95658,3.96768,4.05212,3.93245,4.07526,0.945538,0.969922,0.992289,0.991084,0.937371,1.02332,0.945957,0.961855,1.09723,1.06202,1.03651,1.06633,0.935325,0.910242,0.959377,1.0318,0.915694,0.957395,0.969224,0.953948,0.994963,1.01717,0.99142,0.914234,0.998141,1.07444,1.01498,0.932173,1.0635,0.934866,0.93357,1.03631,1.08196,0.976139,0.983563,1.05829,0.974638,0.932248,1.09049,0.931058,0.991057,0.938831,1.05418,1.04077,1.05493,1.03612,0.905735,0.954109,1.0978,1.06384,2.05635,1.92366,2.04029,1.94676,1.96829,1.92521,1.95604,1.99037,2.05938,2.02901,2.08345,2.06918,2.09708,2.02096,1.96048,1.93818,1.98403,1.92227,2.05416,2.00031,1.99315,2.07324,2.01828,1.94329,2.0066,1.96394,1.97831,1.99134,1.91462,1.96429,1.90207,1.953,1.98769,1.9473,2.07953,1.98482,2.00513,2.00112,1.90755,2.00049,1.96594,1.99998,1.96735,2.01886,1.9166,2.06687,1.97876,1.98066,2.07823,1.92761,3.07896,3.01594,3.02056,3.01229,3.06626,2.97277,2.97058,2.95917,2.91243,2.92732,2.99362,2.92032,3.06585,3.09918,2.93508,2.97442,2.94614,3.03668,3.05164,2.95687,3.02294,3.04288,2.95384,3.03926,2.95966,2.95344,2.99852,2.99199,2.97741,3.09599,3.02709,2.94176,3.08449,3.00188,2.98593,2.90189,3.01228,3.01576,3.03106,3.09208,2.93609,2.98447,2.97174,2.9564,3.012,3.07774,2.97636,3.04657,2.98996,2.93217,4.02509,3.93749,4.01377,3.96586,4.01551,4.07204,4.09348,4.01097,3.93873,3.98591,4.07945,3.90138,3.9848,4.0258,3.96922,4.01321,4.08809,4.09462,4.06559,3.99467,3.97089,3.95562,3.95811,4.00466,4.06786,4.09954,4.04802,3.90098,4.09055,3.93183,3.92213,4.06919,3.97383,4.04464,3.9812,4.093,3.98549,3.93366,3.94074,3.95704,4.01376,3.92651,3.91844,3.92513,4.07683,3.93012,4.07709,4.0717,3.99933,3.90974)
.;
plot(puntos)
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
plot(puntos)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
mejor_solucion = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
plot(puntos)
mejor_solucion = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
mejor_solucion = c(16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
plot(puntos)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
unique(mejor_solucion)
mejor_solucion=c(9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13)
unique(mejor_solucion)
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
mejor_solucion=c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2)
unique(mejor_solucion)
plot(puntos)
points(puntos[,1],puntos[,2],col=rainbow(length(unique(mejor_solucion)))[mejor_solucion],pch=20);
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
plot(puntos)
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
plot(puntos)
soluciones <- read.delim("~/algoritmos-geneticos/clusterizacion/soluciones.txt", header=FALSE)
View(soluciones)
soluciones
unique(soluciones)
for(i in 1:40){
print(length(unique(soluciones(i))));
}
soluciones
soluciones[1, ]
for(i in 1:40){
print(length(unique(soluciones[i, ])));
}
for(i in 1:40){
print((unique(soluciones[i, ])));
}
unique(soluciones[i, ])
soluciones[i, ]
as.matrix(soluciones[i, ])
unique(as.matrix(soluciones[i, ]))
s <- matrix(unlist(soluciones), ncol = 40, byrow = TRUE, USE.NAMES=FALSE)
s <- matrix(unlist(soluciones), ncol = 40, byrow = TRUE)
s
s[1, ]
s <- matrix(unlist(soluciones), ncol = 40, byrow = TRUE)
#unique(as.matrix(soluciones[i, ]))
for(i in 1:40){
print(length(unique(s[i, ])));
}
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
soluciones <- read.delim("~/algoritmos-geneticos/clusterizacion/soluciones.txt", header=FALSE)
View(soluciones)
s <- matrix(unlist(soluciones), ncol = 40, byrow = TRUE)
#unique(as.matrix(soluciones[i, ]))
for(i in 1:40){
print(length(unique(s[i, ])));
}
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
soluciones <- read.delim("~/algoritmos-geneticos/clusterizacion/soluciones.txt", header=FALSE)
View(soluciones)
s <- matrix(unlist(soluciones), ncol = 40, byrow = TRUE)
#unique(as.matrix(soluciones[i, ]))
for(i in 1:40){
print(length(unique(s[i, ])));
}
s
s[39, ]
soluciones[39, ]
s <- matrix(unlist(soluciones), ncol = 800, byrow = TRUE)
#unique(as.matrix(soluciones[i, ]))
for(i in 1:40){
print(length(unique(s[i, ])));
}
s[39, ]
soluciones[39, ]
matrix(soluciones[39, ])
s <- matrix(unlist(soluciones), nrows = 1, byrow = TRUE)
s <- matrix(unlist(soluciones), nrow = 1, byrow = TRUE)
s
s <- matrix(soluciones[39, ], nrow = 1, byrow = TRUE)
s
puntos <- read.delim("~/algoritmos-geneticos/clusterizacion/puntos.txt", header=FALSE)
View(puntos)
plot(puntos)
soluciones <- read.delim("~/algoritmos-geneticos/clusterizacion/soluciones.txt", header=FALSE)
View(soluciones)
s <- matrix(soluciones[39, ], nrow = 1, byrow = TRUE)
s
unique(s)
s
s <- matrix(soluciones[39, ], ncol = 160, byrow = TRUE)
s
unique(s)
